const http = require('http');

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3002,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve(jsonData);
        } catch (err) {
          reject(new Error(`Parse error: ${err.message}, body: ${body}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function quickTest() {
  console.log('üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –†–ê–£–ù–î–û–í');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    const createData = await makeRequest('/api/poker/create', 'POST', {
      userId: 10,
      gameType: 'texas-holdem'
    });
    
    const gameId = createData.gameId;
    console.log(`üéÆ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞: ${gameId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let gameData = await makeRequest(`/api/poker/${gameId}`);
    console.log(`üìä –†–∞—É–Ω–¥: ${gameData.settings?.currentRound}, –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${gameData.settings?.communityCards?.length || 0}, –•–æ–¥: ${gameData.settings?.currentTurn}`);
    
    // –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –±–æ—Ç—ã —Å—ã–≥—Ä–∞–ª–∏
    console.log('‚è≥ –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –±–æ—Ç—ã —Å—ã–≥—Ä–∞–ª–∏...');
    await new Promise(resolve => setTimeout(resolve, 15000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –±–æ—Ç–æ–≤
    gameData = await makeRequest(`/api/poker/${gameId}`);
    console.log(`üìä –ü–æ—Å–ª–µ –±–æ—Ç–æ–≤ - –†–∞—É–Ω–¥: ${gameData.settings?.currentRound}, –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${gameData.settings?.communityCards?.length || 0}, –°—Ç–∞—Ç—É—Å: ${gameData.status}`);
    
    if (gameData.settings?.communityCards?.length > 0) {
      console.log(`üÉè –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${gameData.settings.communityCards.map(c => `${c.value} ${c.suit}`).join(', ')}`);
    }
    
    if (gameData.status === 'finished') {
      console.log(`üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${gameData.winner}`);
    } else {
      console.log(`üéÆ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –Ω–∞ —Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞ ${gameData.settings?.currentTurn}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

quickTest(); 