import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';
import PokerPlayer from '../components/PokerPlayer';
import { ToastContainer } from 'react-toastify';
import { getCardImage } from '../utils/DeckUtils';
import { API_URL } from '../config/api';

// CSS —Å—Ç–∏–ª—ñ –¥–ª—è –ø–æ–≤–∑—É–Ω–∫–∞
const sliderStyles = `
  .slider {
    -webkit-appearance: none;
    appearance: none;
    height: 8px;
    background: #374151;
    border-radius: 4px;
    outline: none;
  }
  
  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 24px;
    height: 24px;
    background: #ffd700;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }
  
  .slider::-webkit-slider-thumb:hover {
    background: #ffed4a;
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.4);
  }
  
  .slider::-moz-range-thumb {
    width: 24px;
    height: 24px;
    background: #ffd700;
    border-radius: 50%;
    cursor: pointer;
    border: none;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }
  
  .slider::-moz-range-thumb:hover {
    background: #ffed4a;
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.4);
  }
`;

function PokerGame() {
  const { gameId } = useParams();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [gameData, setGameData] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  // –°—Ç–∞–Ω–∏ –¥–ª—è –ª–æ–≥—ñ–∫–∏ —Ö–æ–¥—ñ–≤ —Ç–∞ —Ç–∞–π–º–µ—Ä–∞
  const [turnTimer, setTurnTimer] = useState(10);
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(null);
  const [isPlayerTurn, setIsPlayerTurn] = useState(false);
  const [betAmount, setBetAmount] = useState(20); // –†–æ–∑–º—ñ—Ä —Å—Ç–∞–≤–∫–∏
  const [currentBet, setCurrentBet] = useState(0); // –ü–æ—Ç–æ—á–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ –≤ –≥—Ä—ñ
  const [isActionInProgress, setIsActionInProgress] = useState(false);
  const [lastActionTime, setLastActionTime] = useState(0);
  
  // –°—Ç–∞–Ω–∏ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ä–æ–∑–¥–∞—á—ñ –∫–∞—Ä—Ç
  const [isDealing, setIsDealing] = useState(false);
  const [dealingCards, setDealingCards] = useState([]);
  const [dealingStep, setDealingStep] = useState(0);
  const [dealtCardsPerPlayer, setDealtCardsPerPlayer] = useState([0, 0, 0, 0]); // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è

  // –°—Ç–∞–Ω–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
  const [gameFinished, setGameFinished] = useState(false);

  // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —Å–µ—Å—ñ—ó –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç
  const sessionId = React.useMemo(() => gameId || Date.now().toString(), [gameId]);

  // –î–æ–¥–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–æ–ª—É
  const tableDimensions = {
    width: 1200,
    height: 700
  };

  // –°—Ç–∞–Ω–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä–æ—é
  const [showCards, setShowCards] = useState({});

  // –î–û–î–ê–ù–û: Ref –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const timerIntervalRef = useRef(null);

  // –ï—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–æ–º —Ö–æ–¥—É
  useEffect(() => {
    // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if (timerIntervalRef.current) {
      clearInterval(timerIntervalRef.current);
      timerIntervalRef.current = null;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Ç–∞–π–º–µ—Ä
    if (gameData && gameData.status === 'playing' && gameData.settings?.currentTurn !== undefined && !isActionInProgress) {
      const currentPlayer = gameData.players[gameData.settings.currentTurn];
      const isRealPlayerTurn = currentPlayer && 
        currentPlayer.username === user?.username && 
        !currentPlayer.folded && 
        !currentPlayer.hasActed &&
        !currentPlayer.isBot;
      
      // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¢–Ü–õ–¨–ö–ò –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è —ñ —Ç—ñ–ª—å–∫–∏ —Ä–∞–∑
      if (isRealPlayerTurn && !timerIntervalRef.current) {
        console.log(`[CLIENT] üïê –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –≥—Ä–∞–≤—Ü—è ${currentPlayer.username} –Ω–∞ 10 —Å–µ–∫—É–Ω–¥`);
        setTurnTimer(10); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å
        
        timerIntervalRef.current = setInterval(() => {
          setTurnTimer(prev => {
            if (prev <= 1) {
              console.log(`[CLIENT] ‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤ –¥–ª—è –≥—Ä–∞–≤—Ü—è ${currentPlayer.username}, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π fold`);
              // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –¥—ñ—î—é
              clearInterval(timerIntervalRef.current);
              timerIntervalRef.current = null;
              
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π fold
              handlePlayerAction('fold');
              
              return 10; // –°–∫–∏–¥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
            }
            return prev - 1;
          });
        }, 1000);
      } else if (!isRealPlayerTurn && timerIntervalRef.current) {
        // –Ø–∫—â–æ —Ö—ñ–¥ –ù–ï —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è - –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
        clearInterval(timerIntervalRef.current);
        timerIntervalRef.current = null;
        setTurnTimer(10);
      }
    } else if (timerIntervalRef.current) {
      // –ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥—ñ—è - –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
      clearInterval(timerIntervalRef.current);
      timerIntervalRef.current = null;
      setTurnTimer(10);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      if (timerIntervalRef.current) {
        clearInterval(timerIntervalRef.current);
        timerIntervalRef.current = null;
      }
    };
  }, [gameData?.settings?.currentTurn, gameData?.status, user?.username, isActionInProgress]); // –ü–†–ò–ë–†–ê–õ–ò turnTimer –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π!

  // –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –≥—Ä–∏
  const handleExit = async () => {
    if (gameData && user) {
      try {
        const response = await axios.post(`${API_URL}/api/poker/${gameId}/leave`, {
          userId: user.username
        });
        
        if (response.data.success) {
          navigate('/');
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –≥—Ä–∏:', error);
      }
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä–∏
  const handleNextGame = async () => {
    try {
      console.log(`[CLIENT] ================ –ó–ê–ü–ò–¢ –ù–ê–°–¢–£–ü–ù–û–á –ì–†–ò ================`);
      console.log(`[CLIENT] –ü–æ—Ç–æ—á–Ω–∞ –≥—Ä–∞: ${gameId}, —Å—Ç–∞—Ç—É—Å: ${gameData?.status}`);
      
      const response = await axios.post(`${API_URL}/api/poker/${gameId}/next-game`);
      
      console.log(`[CLIENT] ================ –í–Ü–î–ü–û–í–Ü–î–¨ –û–¢–†–ò–ú–ê–ù–ê ================`);
      console.log(`[CLIENT] Success:`, response.data.success);
      console.log(`[CLIENT] –ù–æ–≤–∞ –≥—Ä–∞ ID:`, response.data.gameId);
      
      if (response.data.success && response.data.gameId) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –Ω–æ–≤—É –≥—Ä—É
        console.log(`[CLIENT] üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–æ–≤—É –≥—Ä—É: ${response.data.gameId}`);
        navigate(`/game/${response.data.gameId}`);
      } else {
        console.error('[CLIENT] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –Ω–æ–≤–æ—ó –≥—Ä–∏');
        // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É –∫–æ–ª–∏ –≥—Ä–∞ –Ω–µ –º–æ–∂–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏—Å—è
        if (response.data.canContinue === false) {
          console.log('[CLIENT] üèÜ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è');
          setError('–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.');
        } else {
          setError('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É');
        }
      }
    } catch (error) {
      console.error('[CLIENT] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä–∏:', error);
      
      // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
      if (error.response?.status === 400) {
        setError(error.response.data.message || '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É');
      } else if (error.response?.status === 404) {
        setError('–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      } else {
        setError('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ—ó –≥—Ä–∏');
      }
    }
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∏
  useEffect(() => {
    const fetchGameData = async () => {
      try {
        setLoading(true);
        console.log(`[CLIENT] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∏: ${gameId}`);
        
        const response = await axios.get(`${API_URL}/api/poker/${gameId}`);
        
        if (response.data) {
          setGameData(response.data);
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≥—Ä–∏
          if (response.data.status === 'finished' || response.data.status === 'eliminated') {
            console.log(`[CLIENT] –ü–µ—Ä–≤–∏–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: ${response.data.status}`);
            setGameFinished(true);
          }
          
          // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞–≤–∫—É
          if (response.data.players && response.data.players.length > 0) {
            const maxBet = Math.max(...response.data.players.map(p => p.currentBet || 0));
            setCurrentBet(maxBet);
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Å—Ç–∞–≤–∫–∏ —è–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–π–∑
            const minRaise = maxBet + (response.data.settings?.bigBlind || 20);
            setBetAmount(minRaise);
          }
          
          // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏–π —Ö—ñ–¥
          if (response.data.currentTurn !== undefined) {
            setCurrentPlayerIndex(response.data.currentTurn);
            const currentPlayer = response.data.players[response.data.currentTurn];
            const newIsPlayerTurn = currentPlayer && 
              currentPlayer.username === user?.username && 
              !currentPlayer.folded && 
              !currentPlayer.hasActed;
            setIsPlayerTurn(newIsPlayerTurn);
            
            // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ö–æ–¥—É
            setTurnTimer(10);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ —è–∫—â–æ –∑–∞—Ä–∞–∑ –π–æ–≥–æ —Ö—ñ–¥
            if (currentPlayer && currentPlayer.isBot && !currentPlayer.folded && !currentPlayer.hasActed && response.data.status === 'playing') {
              console.log(`[CLIENT] –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –±–æ—Ç–∞ ${currentPlayer.username}`);
              setTimeout(async () => {
                try {
                  await axios.post(`${API_URL}/api/poker/${gameId}/bot-action`);
                  console.log(`[CLIENT] –ü–µ—Ä—à–∏–π –±–æ—Ç ${currentPlayer.username} –∑–∞–ø—É—â–µ–Ω–∏–π`);
                } catch (error) {
                  console.error('[CLIENT] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø–µ—Ä—à–æ–≥–æ –±–æ—Ç–∞:', error);
                }
              }, 2000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
            }
          }
          
          // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Ä–æ–∑–¥–∞—á—ñ –∫–∞—Ä—Ç –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏
          if (response.data.currentRound === 'preflop' && 
              response.data.players.some(p => p.cards && p.cards.length > 0) &&
              !isDealing) {
            console.log('[CLIENT] –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Ä–æ–∑–¥–∞—á—ñ –∫–∞—Ä—Ç');
            startDealingAnimation(response.data);
          }
        } else {
          setError('–î–∞–Ω—ñ –≥—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏:', error);
        setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏');
      } finally {
        setLoading(false);
      }
    };

    if (gameId && user) {
      fetchGameData();
    }
  }, [gameId, user]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Ö–æ–¥–∞–º–∏ –±–æ—Ç—ñ–≤
  useEffect(() => {
    if (!gameId || !user?.username) return;

    const interval = setInterval(async () => {
      // –ê–≤—Ç–æ–æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ —ñ –Ω–µ –π–¥–µ –¥—ñ—è
      if (gameData && gameData.status === 'playing' && !isActionInProgress) {
        console.log(`[CLIENT] –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –∑–∞–ø–∏—Ç –¥–æ –≥—Ä–∏ ${gameId}`);
        try {
          const response = await axios.get(`${API_URL}/api/poker/${gameId}`);
          const newGameData = response.data;
          
          console.log(`[CLIENT] –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ`, {
            status: newGameData.status,
            currentTurn: newGameData.settings?.currentTurn,
            currentRound: newGameData.settings?.currentRound
          });
          
          // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
          if (newGameData.players && newGameData.players.length > 0 && newGameData.settings) {
            setGameData(newGameData);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Ä–∞—É–Ω–¥
            if (gameData.settings?.currentRound !== newGameData.settings?.currentRound) {
              console.log(`[CLIENT] –ó–º—ñ–Ω–∞ —Ä–∞—É–Ω–¥—É: ${gameData.settings?.currentRound} ‚Üí ${newGameData.settings?.currentRound}`);
            }
          }
          
          // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≥—Ä–∏ —ñ –∑—É–ø–∏–Ω—è—î–º–æ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —ñ–≥–æ—Ä
          if (newGameData.status === 'finished' || newGameData.status === 'eliminated') {
            if (!gameFinished) {
              console.log(`[CLIENT] –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: ${newGameData.status}`);
              setGameFinished(true);
            }
            clearInterval(interval);
            return;
          }
          
          // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞–≤–∫—É
          if (newGameData.players && newGameData.players.length > 0) {
            const maxBet = Math.max(...newGameData.players.map(p => p.currentBet || 0));
            setCurrentBet(maxBet);
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Å—Ç–∞–≤–∫–∏ —è–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–π–∑
            const minRaise = maxBet + (newGameData.settings?.bigBlind || 20);
            setBetAmount(minRaise);
          }
          
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Ö–æ–¥—É
          if (newGameData.currentTurn !== undefined) {
            setCurrentPlayerIndex(newGameData.currentTurn);
            const currentPlayer = newGameData.players[newGameData.currentTurn];
            const newIsPlayerTurn = currentPlayer && 
              currentPlayer.username === user?.username && 
              !currentPlayer.folded && 
              !currentPlayer.hasActed;
            setIsPlayerTurn(newIsPlayerTurn);
            
            // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ö–æ–¥—É
            if (newIsPlayerTurn && gameData.currentTurn !== newGameData.currentTurn) {
              setTurnTimer(10);
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ —è–∫—â–æ –∑–∞—Ä–∞–∑ –π–æ–≥–æ —Ö—ñ–¥
            if (currentPlayer && currentPlayer.isBot && !currentPlayer.folded && !currentPlayer.hasActed && newGameData.status === 'playing') {
              console.log(`[CLIENT] –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ ${currentPlayer.username}`);
              setTimeout(async () => {
                // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥—Ä–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
                const gameStatus = await axios.get(`${API_URL}/api/poker/${gameId}`);
                if (gameStatus.data.status !== 'playing') {
                  console.log('[CLIENT] –ì—Ä–∞ –±—ñ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞');
                  return;
                }
                
                await axios.post(`${API_URL}/api/poker/${gameId}/bot-action`);
                console.log(`[CLIENT] –ë–æ—Ç ${currentPlayer.username} –∑–∞–ø—É—â–µ–Ω–∏–π`);
              }, 2000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 2 —Å–µ–∫—É–Ω–¥–∞
            }
          }
        } catch (error) {
          console.error('[CLIENT] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
        }
      }
    }, 2000); // –∑–∞—Ç—Ä–∏–º–∫–∞ 2 —Å–µ–∫—É–Ω–¥–∏

    return () => clearInterval(interval);
  }, [gameData?.status, gameId, user?.username, gameFinished]);

  // –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –≥—Ä–∞–≤—Ü—è
  const handlePlayerAction = useCallback(async (action, amount = 0) => {
    console.log(`[CLIENT] ================ –í–Ü–î–ü–†–ê–í–ö–ê –î–Ü–á ================`);
    
    // –ü–û–°–ò–õ–ï–ù–ê –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–Æ–ß–ò–• –ó–ê–ü–ò–¢–Ü–í
    
    // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≥—Ä–∞–≤–µ—Ü—å –Ω–µ –∑—Ä–æ–±–∏–≤ fold
    if (gameData?.players) {
      const currentPlayer = gameData.players.find(p => p.username === user?.username);
      if (currentPlayer?.folded) {
        console.warn('[CLIENT] ‚ö†Ô∏è –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –∑—Ä–æ–±–∏–≤ fold');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ —Ö—ñ–¥ —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è
      const activePlayer = gameData.players[gameData.settings?.currentTurn];
      if (!activePlayer || activePlayer.username !== user?.username) {
        console.warn('[CLIENT] ‚ö†Ô∏è –ó–∞—Ä–∞–∑ –Ω–µ —Ö—ñ–¥ —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≥—Ä–∞–≤–µ—Ü—å —â–µ –Ω–µ –∑—Ä–æ–±–∏–≤ –¥—ñ—é –≤ —Ü—å–æ–º—É —Ä–∞—É–Ω–¥—ñ
      if (activePlayer.hasActed) {
        console.warn('[CLIENT] ‚ö†Ô∏è –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –∑—Ä–æ–±–∏–≤ –¥—ñ—é –≤ —Ü—å–æ–º—É —Ä–∞—É–Ω–¥—ñ');
        return;
      }
    }
    
    // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥—ñ–π
    if (isActionInProgress) {
      console.warn('[CLIENT] ‚ö†Ô∏è –Ü–Ω—à–∞ –¥—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
      return;
    }
    
    // 3. –ë—ñ–ª—å—à —Å—Ç—Ä–æ–≥–∞ —á–∞—Å–æ–≤–∞ –∑–∞—Ö–∏—Å—Ç - 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –¥—ñ—è–º–∏
    const now = Date.now();
    const timeSinceLastAction = now - lastActionTime;
    if (timeSinceLastAction < 2000) {
      console.warn(`[CLIENT] ‚ö†Ô∏è –î—ñ—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞. –û—Å—Ç–∞–Ω–Ω—î –¥—ñ—è –±—É–ª–∞ ${timeSinceLastAction}–º—Å —Ç–æ–º—É`);
      return;
    }

    try {
      // –í–°–¢–ê–ù–û–í–õ–Æ–Ñ–ú–û –ë–õ–û–ö–£–í–ê–ù–ù–Ø
      setIsActionInProgress(true);
      setLastActionTime(now);
      
      console.log(`[CLIENT] –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥—ñ—é: ${action}, —Å—É–º–∞: ${amount}`);
      console.log(`[CLIENT] URL: ${API_URL}/api/poker/${gameId}/action`);
      console.log(`[CLIENT] –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:`, {
        action,
        amount,
        userId: user?.username
      });

      const response = await axios.post(`${API_URL}/api/poker/${gameId}/action`, {
        action,
        amount,
        userId: user?.username
      });

      console.log(`[CLIENT] ================ –í–Ü–î–ü–û–í–Ü–î–¨ –û–¢–†–ò–ú–ê–ù–ê ================`);
      console.log(`[CLIENT] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:`, response.status);
      console.log(`[CLIENT] –ü–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:`, response.data);

      // –î–û–î–ê–ù–û: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–æ–≤—É –≥—Ä—É
      if (response.data.redirectToNewGame && response.data.newGameId) {
        console.log(`[CLIENT] –ì—Ä–∞ –±—É–ª–∞ –∑–∞–º—ñ–Ω–µ–Ω–∞ –Ω–æ–≤–æ—é ${response.data.newGameId}`);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ URL –Ω–∞ –Ω–æ–≤—É –≥—Ä—É
        window.history.replaceState(null, '', `/poker/${response.data.newGameId}`);
        
        // –û–¥—Ä–∞–∑—É —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ –Ω–æ–≤–æ—ó –≥—Ä–∏ –∑ —Ç—ñ—î—é –∂ –¥—ñ—î—é
        try {
          const newResponse = await axios.post(`${API_URL}/api/poker/${response.data.newGameId}/action`, {
            action,
            amount,
            userId: user?.username
          });
          
          // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∏
          setGameData(newResponse.data);
          console.log(`[CLIENT] –î—ñ—è ${action} –≤–∏–∫–æ–Ω–∞–Ω–∞ –≤ –Ω–æ–≤—ñ–π –≥—Ä—ñ`);
          
        } catch (newError) {
          console.error('[CLIENT] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ—ó –≤ –Ω–æ–≤—ñ–π –≥—Ä—ñ:', newError);
        }
        
        return;
      }
      
      // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
      if (response.data && response.data.players && response.data.settings) {
        setGameData(response.data);
        console.log(`[CLIENT] –î–∞–Ω—ñ –≥—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø—ñ—Å–ª—è –¥—ñ—ó`);
      } else {
        console.warn('[CLIENT] ‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –¥—ñ—ó');
      }
      
      // –ù–µ–≥–∞–π–Ω–æ —Ä–æ–±–∏–º–æ GET –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      try {
        const freshData = await axios.get(`${API_URL}/api/poker/${gameId}`);
        if (freshData.data && freshData.data.players && freshData.data.settings) {
          setGameData(freshData.data);
          console.log(`[CLIENT] –°–≤—ñ–∂—ñ –¥–∞–Ω—ñ –≥—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ`);
        }
      } catch (fetchError) {
        console.error('[CLIENT] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö:', fetchError);
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞–≤–∫—É
      if (response.data.players && response.data.players.length > 0) {
        const maxBet = Math.max(...response.data.players.map(p => p.currentBet || 0));
        setCurrentBet(maxBet);
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Å—Ç–∞–≤–∫–∏ —è–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–π–∑
        const minRaise = maxBet + (response.data.settings?.bigBlind || 20);
        setBetAmount(minRaise);
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Ö–æ–¥—É
      if (response.data.currentTurn !== undefined) {
        setCurrentPlayerIndex(response.data.currentTurn);
        const currentPlayer = response.data.players[response.data.currentTurn];
        const newIsPlayerTurn = currentPlayer && 
          currentPlayer.username === user?.username && 
          !currentPlayer.folded && 
          !currentPlayer.hasActed;
        setIsPlayerTurn(newIsPlayerTurn);
      }
      
      // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä
      setTurnTimer(10);
      
      console.log(`[CLIENT] ================ –î–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê ================`);
      console.log(`–ì—Ä–∞–≤–µ—Ü—å –∑—Ä–æ–±–∏–≤ ${action}`, response.data);
      
      console.log(`[CLIENT] –î—ñ—è "${action}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞`);
    } catch (error) {
      console.error('[CLIENT] ‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ—ó:', error);
      
      if (error.response?.status === 429) {
        console.warn('[CLIENT] ‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ - –±–ª–æ–∫—É–≤–∞–Ω–Ω—è');
      } else if (error.response?.status === 400) {
        console.warn('[CLIENT] ‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥—ñ—è:', error.response.data?.message);
      } else {
        console.error('[CLIENT] ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
      }
    } finally {
      // –†–æ–∑–±–ª–æ–∫—É—î–º–æ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥–∏
      setTimeout(() => {
        setIsActionInProgress(false);
      }, 1500);
    }
  }, [gameData, user, gameId, isActionInProgress, lastActionTime]);

  // –ü–†–ò–ë–†–ê–ù–û: –î—É–±–ª—é—é—á–∏–π —Ö—É–∫ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è - –æ—Å–Ω–æ–≤–Ω–µ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —î –≤ useEffect –≤–∏—â–µ

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç
  const handleShowdownToggle = (playerId) => {
    setShowCards(prev => ({
      ...prev,
      [playerId]: !prev[playerId]
    }));
  };

  // –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ –≥—Ä–∏
  const handleJoinGame = async () => {
    try {
      setLoading(true);
      const response = await axios.post(`${API_URL}/api/poker/${gameId}/join`, {
        userId: user.username
      });
      
      if (response.data.success) {
        setGameData(response.data.game);
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –≥—Ä–∏:', error);
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏');
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ–∑–∏—Ü—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤ - —Ç–µ–ø–µ—Ä –±–µ—Ä–µ–º–æ –∑ –ë–î
  const getPlayerPositions = () => {
    if (!gameData?.players) return {};
    
    const positions = {};
    const dealerPosition = gameData.players.findIndex(p => p.isDealer);
    const playersCount = gameData.players.length;
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∏–ª–µ—Ä–∞
    gameData.players.forEach((player, index) => {
      const isDealer = index === dealerPosition;
      const isSmallBlind = (dealerPosition + 1) % playersCount === index;
      const isBigBlind = (dealerPosition + 2) % playersCount === index;
      
      positions[player.username] = {
        ...player,
        position: isDealer ? 'D' : isSmallBlind ? 'SB' : isBigBlind ? 'BB' : '',
        positionColor: isDealer ? 'white' : isSmallBlind ? 'blue' : isBigBlind ? 'red' : 'gray'
      };
    });
    
    return positions;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ —Å—Ç–æ–ª—ñ
  const getFixedPlayerPosition = (playerId) => {
    if (!gameData?.players || !user?.username) return null;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    const realPlayerIndex = gameData.players.findIndex(p => p.username === user.username);
    if (realPlayerIndex === -1) return null;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    const currentPlayerIndex = gameData.players.findIndex(p => p._id === playerId || p.username === playerId);
    if (currentPlayerIndex === -1) return null;
    
    // –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
    let relativePosition = (currentPlayerIndex - realPlayerIndex + gameData.players.length) % gameData.players.length;
    
    // –§—ñ–∫—Å–æ–≤–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó: 0 = –∑–Ω–∏–∑—É (–≥—Ä–∞–≤–µ—Ü—å), 1 = –∑–ª—ñ–≤–∞, 2 = –∑–≤–µ—Ä—Ö—É, 3 = —Å–ø—Ä–∞–≤–∞
    const positionMap = {
      0: 'player',    // –∑–Ω–∏–∑—É - –∑–∞–≤–∂–¥–∏ —Ä–µ–∞–ª—å–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å
      1: 'leftBot',   // –∑–ª—ñ–≤–∞
      2: 'topBot',    // –∑–≤–µ—Ä—Ö—É
      3: 'rightBot'   // —Å–ø—Ä–∞–≤–∞
    };
    
    return positionMap[relativePosition] || 'player';
  };

  // –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
  const getPlayerAtPosition = (positionName) => {
    if (!gameData?.players || !user?.username) return null;
    
    // –®—É–∫–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –ø–æ username –∑–∞–º—ñ—Å—Ç—å user._id
    const realPlayerIndex = gameData.players.findIndex(p => p.username === user.username);
    if (realPlayerIndex === -1) return null;
    
    const positionMap = {
      'player': 0,    // –∑–Ω–∏–∑—É
      'leftBot': 1,   // –∑–ª—ñ–≤–∞  
      'topBot': 2,    // –∑–≤–µ—Ä—Ö—É
      'rightBot': 3   // —Å–ø—Ä–∞–≤–∞
    };
    
    const relativeIndex = positionMap[positionName];
    if (relativeIndex === undefined) return null;
    
    const actualIndex = (realPlayerIndex + relativeIndex) % gameData.players.length;
    return gameData.players[actualIndex];
  };

  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
  const playerPositions = getPlayerPositions();

  // –§—É–Ω–∫—Ü—ñ—è –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ä–æ–∑–¥–∞—á—ñ –∫–∞—Ä—Ç
  const startDealingAnimation = (gameData) => {
    if (!gameData || !gameData.players) return;
    
    setIsDealing(true);
    setDealtCardsPerPlayer([0, 0, 0, 0]); // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–∞—Ä—Ç
    
    // –ó–Ω–∞–π–¥–µ–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–∏–ª–µ—Ä–∞
    const dealerIndex = gameData.players.findIndex(p => p.isDealer);
    if (dealerIndex === -1) return;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –∫–∞—Ä—Ç –¥–ª—è —Ä–æ–∑–¥–∞—á—ñ (–ø–æ 2 –∫–∞—Ä—Ç–∏ –∫–æ–∂–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é)
    const cardsToAnimate = [];
    for (let round = 0; round < 2; round++) {
      gameData.players.forEach((player, playerIndex) => {
        cardsToAnimate.push({
          playerId: player._id,
          playerIndex,
          round,
          delay: (round * gameData.players.length + playerIndex) * 200 // 200–º—Å –º—ñ–∂ –∫–∞—Ä—Ç–∞–º–∏
        });
      });
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∑ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏
    cardsToAnimate.forEach((card, index) => {
      setTimeout(() => {
        // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –≥—Ä–∞–≤—Ü—è
        setDealtCardsPerPlayer(prev => {
          const newCounts = [...prev];
          newCounts[card.playerIndex] = Math.min(newCounts[card.playerIndex] + 1, 2);
          return newCounts;
        });
        
        // –ö–æ–ª–∏ –≤—Å—ñ –∫–∞—Ä—Ç–∏ —Ä–æ–∑–¥–∞–Ω—ñ - –∑–∞–≤–µ—Ä—à—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        if (index === cardsToAnimate.length - 1) {
          setTimeout(() => {
            setIsDealing(false);
            // –ù–ï —Å–∫–∏–¥–∞—î–º–æ dealtCardsPerPlayer - –∑–∞–ª–∏—à–∞—î–º–æ [2,2,2,2]
          }, 500); // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è–º –∞–Ω—ñ–º–∞—Ü—ñ—ó
        }
      }, card.delay);
    });
  };

  // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –∫–∞—Ä—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞
  const getCardsForPlayer = (player, isBot) => {
    // –Ø–∫—â–æ –∫–∞—Ä—Ç–∏–Ω–∏ —î –≤ –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
    if (player.cards && Array.isArray(player.cards)) {
      // –Ü–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å hidden, —â–æ–± –∫–∞—Ä—Ç–∏–Ω–∏ –Ω–µ –≤—Ç—Ä–∞—á–∞–ª–∏ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
      // –õ–æ–≥—ñ–∫–∞ –ø–æ–∫–∞–∑—É –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ –∫–∞—Ä—Ç –±–æ—Ç—ñ–≤ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ PokerPlayer
      return player.cards.map(card => ({
        ...card,
        // –ü—Ä–∏–±—Ä–∞–ª–∏ hidden —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é
      }));
    }
    return [];
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (loading) {
  return (
      <div className="relative w-full h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</div>
          </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (error) {
  return (
      <div className="relative w-full h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-red-500 text-xl">{error}</div>
            <button 
          onClick={() => navigate('/')}
          className="ml-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
            >
          –ù–∞ –≥–æ–ª–æ–≤–Ω—É
            </button>
          </div>
    );
  }

  return (
    <div className="relative w-full h-screen bg-gray-900 overflow-hidden flex items-center justify-center">
      {/* CSS —Å—Ç–∏–ª—ñ –¥–ª—è –ø–æ–≤–∑—É–Ω–∫–∞ */}
      <style>{sliderStyles}</style>
      
      {/* –î–∏–Ω–∞–º—ñ—á–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è —Å—Ç–æ–ª—É */}
      <style>{`
        .table-container {
          width: ${tableDimensions.width}px;
          height: ${tableDimensions.height}px;
          max-width: 90vw;
          max-height: 80vh;
        }
      `}</style>
      
      <ToastContainer />
      
      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏ */}
      {gameData?.status === 'waiting' && (
        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
          <button
            onClick={handleJoinGame}
            disabled={loading}
            className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg font-bold text-lg disabled:opacity-50"
          >
            {loading ? '–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è...' : '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏'}
          </button>
        </div>
      )}

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä—É - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –ª—ñ–≤–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –∫—É—Ç */}
      {gameData && (
      <div className="absolute top-4 left-4 z-50">
        <div className="bg-black bg-opacity-70 rounded-lg p-3 text-white text-sm">
          <div>üéØ –†–∞—É–Ω–¥: {gameData.currentRound || 'preflop'}</div>
          
          {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è */}
          {gameFinished && gameData.winner && (
            <div className="mt-2 pt-2 border-t border-gray-600">
              <div className="text-yellow-400 font-bold">üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {gameData.winner}</div>
              {gameData.winningHand && (
                <div className="text-xs text-gray-300">{gameData.winningHand}</div>
              )}
            </div>
          )}

          </div>
      </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è - –ø—Ä–∞–≤–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –∫—É—Ç */}
      <div className="absolute top-4 right-4 xl:top-4 xl:right-4 2xl:top-4 2xl:right-4 flex gap-2 z-50">
        {gameFinished && (
          <button
            onClick={handleNextGame}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded font-bold"
          >
            –ù–∞—Å—Ç—É–ø–Ω–∞ –≥—Ä–∞
          </button>
        )}
        <button
          onClick={handleExit}
          className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded font-bold"
        >
          –í–∏–π—Ç–∏
        </button>
      </div>

      {/* –ì–æ–ª–æ–≤–Ω–∏–π —Å—Ç—ñ–ª */}
      <div className="table-container relative">
        {/* –§–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–æ–ª—É */}
        <div 
          className="absolute inset-0 bg-cover bg-center rounded-3xl"
          style={{
            backgroundImage: 'url(/BG/poker-table.png)',
            backgroundSize: 'contain',
            backgroundRepeat: 'no-repeat'
          }}
        />

        {/* –ì—Ä–∞–≤—Ü—ñ */}
        {gameData?.players && (
          <>
            {/* –ì—Ä–∞–≤–µ—Ü—å –∑–Ω–∏–∑—É */}
            {getPlayerAtPosition('player') && (
              <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
                <PokerPlayer
                  key={`${getPlayerAtPosition('player')._id}-${sessionId}`}
                  player={getPlayerAtPosition('player')}
                  position={0}
                  isCurrentTurn={gameData.settings?.currentTurn === gameData.players.findIndex(p => p._id === getPlayerAtPosition('player')._id)}
                  gameStatus={gameData.status}
                  showCards={showCards}
                  onToggleCards={handleShowdownToggle}
                  cards={getCardsForPlayer(getPlayerAtPosition('player'), false)}
                  gameFinished={gameFinished}
                  winningCards={gameData.winningCards}
                  sessionId={sessionId}
                  turnTimer={isPlayerTurn ? turnTimer : null}
                />
              </div>
            )}

            {/* –ë–æ—Ç –∑–ª—ñ–≤–∞ */}
            {getPlayerAtPosition('leftBot') && (
              <div className="absolute left-8 top-1/2 transform -translate-y-1/2">
                <PokerPlayer
                  key={`${getPlayerAtPosition('leftBot')._id}-${sessionId}`}
                  player={getPlayerAtPosition('leftBot')}
                  position={90}
                  isCurrentTurn={gameData.settings?.currentTurn === gameData.players.findIndex(p => p._id === getPlayerAtPosition('leftBot')._id)}
                  gameStatus={gameData.status}
                  showCards={showCards}
                  onToggleCards={handleShowdownToggle}
                  cards={getCardsForPlayer(getPlayerAtPosition('leftBot'), true)}
                  gameFinished={gameFinished}
                  winningCards={gameData.winningCards}
                  sessionId={sessionId}
                  dealtCards={dealtCardsPerPlayer[1] || 0}
                />
              </div>
            )}

            {/* –ë–æ—Ç –∑–≤–µ—Ä—Ö—É */}
            {getPlayerAtPosition('topBot') && (
              <div className="absolute top-8 left-1/2 transform -translate-x-1/2">
                <PokerPlayer
                  key={`${getPlayerAtPosition('topBot')._id}-${sessionId}`}
                  player={getPlayerAtPosition('topBot')}
                  position={180}
                  isCurrentTurn={gameData.settings?.currentTurn === gameData.players.findIndex(p => p._id === getPlayerAtPosition('topBot')._id)}
                  gameStatus={gameData.status}
                  showCards={showCards}
                  onToggleCards={handleShowdownToggle}
                  cards={getCardsForPlayer(getPlayerAtPosition('topBot'), true)}
                  gameFinished={gameFinished}
                  winningCards={gameData.winningCards}
                  sessionId={sessionId}
                  dealtCards={dealtCardsPerPlayer[2] || 0}
                />
              </div>
            )}

            {/* –ë–æ—Ç —Å–ø—Ä–∞–≤–∞ */}
            {getPlayerAtPosition('rightBot') && (
              <div className="absolute right-8 top-1/2 transform -translate-y-1/2">
                <PokerPlayer
                  key={`${getPlayerAtPosition('rightBot')._id}-${sessionId}`}
                  player={getPlayerAtPosition('rightBot')}
                  position={270}
                  isCurrentTurn={gameData.settings?.currentTurn === gameData.players.findIndex(p => p._id === getPlayerAtPosition('rightBot')._id)}
                  gameStatus={gameData.status}
                  showCards={showCards}
                  onToggleCards={handleShowdownToggle}
                  cards={getCardsForPlayer(getPlayerAtPosition('rightBot'), true)}
                  gameFinished={gameFinished}
                  winningCards={gameData.winningCards}
                  sessionId={sessionId}
                  dealtCards={dealtCardsPerPlayer[3] || 0}
                />
              </div>
            )}
          </>
        )}

        {/* –ó–∞–≥–∞–ª—å–Ω—ñ –∫–∞—Ä—Ç–∏ */}
        {gameData?.settings?.communityCards && gameData.settings.communityCards.length > 0 && (
          <div className="absolute top-[40%] left-1/2 transform -translate-x-1/2 flex gap-2">
            {gameData.settings.communityCards.map((card, index) => (
              <img
                key={`community-${card.suit}-${card.value}-${index}-${gameData.settings.currentRound}`}
                src={getCardImage(card)}
                alt={`${card.value}${card.suit}`}
                className="w-16 h-24 rounded shadow-lg border border-gray-300 transition-all duration-300 cursor-pointer hover:scale-110 hover:z-50"
                style={{
                  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
                  transform: 'scale(1)',
                  zIndex: 10
                }}
                onMouseEnter={(e) => {
                  e.target.style.boxShadow = '0 12px 24px rgba(0, 0, 0, 0.4)';
                  e.target.style.transform = 'scale(1.15)';
                  e.target.style.zIndex = '100';
                }}
                onMouseLeave={(e) => {
                  e.target.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
                  e.target.style.transform = 'scale(1)';
                  e.target.style.zIndex = '10';
                }}
              />
            ))}
          </div>
        )}

        {/* –ë–∞–Ω–∫ */}
        {gameData?.pot > 0 && (
          <div className="absolute top-[55%] left-1/2 transform -translate-x-1/2">
            <div className="bg-black bg-opacity-70 rounded-lg px-4 py-2">
              <div className="text-yellow-400 font-bold text-center">
                üí∞ –ë–∞–Ω–∫: {gameData.pot}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è - –∑–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞ */}
      {gameData?.status === 'playing' && (
        <div className="absolute bottom-32 right-6 xl:bottom-32 xl:right-6 2xl:bottom-32 2xl:right-6 flex flex-col items-end gap-3 z-40">
          {/* –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–∏—Ö —Å—Ç–∞–≤–æ–∫ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö */}
          <div className="grid grid-cols-4 gap-2">
            {[33, 50, 75, 100].map(percent => {
              const ourPlayer = gameData.players.find(p => p.username === user?.username) || {}; // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
              const playerChips = ourPlayer.chips || 1000;
              const maxPossibleBet = (ourPlayer.currentBet || 0) + playerChips; // –ú–∞–∫—Å–∏–º—É–º = –ø–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞–≤–∫–∞ + —Ñ—ñ—à–∫–∏ –≥—Ä–∞–≤—Ü—è
              const betValue = Math.floor((maxPossibleBet * percent) / 100);
              
              return (
                <button
                  key={percent}
                  onClick={() => setBetAmount(betValue)}
                  className="bg-gray-700 hover:bg-gray-600 text-white px-2 py-1 rounded text-xs"
                >
                  {percent}%
                </button>
              );
            })}
          </div>

          {/* –ü–æ–≤–∑—É–Ω–æ–∫ —Å—Ç–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ–Ω—É —ñ —Ç–µ–∫—Å—Ç—É */}
          <div className="flex items-center gap-3 min-w-80">
            <span className="text-white text-sm">{currentBet + 20}</span>
            <input
              type="range"
              min={currentBet + 20}
              max={(() => {
                const ourPlayer = gameData.players.find(p => p.username === user?.username) || {};
                return (ourPlayer.currentBet || 0) + (ourPlayer.chips || 1000);
              })()}
              value={betAmount}
              onChange={(e) => setBetAmount(parseInt(e.target.value))}
              className="slider flex-1"
            />
            <span className="text-white text-sm">{betAmount}</span>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥—ñ–π */}
          <div className="flex gap-2">
            <button 
              onClick={() => handlePlayerAction('fold')}
              disabled={isActionInProgress || !isPlayerTurn}
              className="bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white px-4 py-2 rounded font-bold"
            >
              Fold
            </button>
            
            <button 
              onClick={() => handlePlayerAction('call')}
              disabled={isActionInProgress || !isPlayerTurn}
              className="bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-600 text-white px-4 py-2 rounded font-bold"
            >
              Call {currentBet > 0 ? currentBet : ''}
            </button>
            
            <button 
              onClick={() => handlePlayerAction('raise', betAmount)}
              disabled={isActionInProgress || !isPlayerTurn || betAmount <= currentBet}
              className="bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white px-4 py-2 rounded font-bold"
            >
              Raise {betAmount}
            </button>
          </div>
        </div>
      )}

      {error && (
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-red-600 text-white p-4 rounded-lg z-50">
          {error}
        </div>
      )}

      {loading && (
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black bg-opacity-70 text-white p-4 rounded-lg z-50">
          –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
        </div>
      )}
    </div>
  );
}

export default PokerGame; 
