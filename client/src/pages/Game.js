import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';
import PokerPlayer from '../components/PokerPlayer';
import { ToastContainer } from 'react-toastify';
import { getCardImage } from '../utils/DeckUtils';
import { API_URL } from '../config/api';

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
const sliderStyles = `
  .slider {
    -webkit-appearance: none;
    appearance: none;
    height: 8px;
    background: #374151;
    border-radius: 4px;
    outline: none;
  }
  
  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 24px;
    height: 24px;
    background: #ffd700;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }
  
  .slider::-webkit-slider-thumb:hover {
    background: #ffed4a;
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.4);
  }
  
  .slider::-moz-range-thumb {
    width: 24px;
    height: 24px;
    background: #ffd700;
    border-radius: 50%;
    cursor: pointer;
    border: none;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }
  
  .slider::-moz-range-thumb:hover {
    background: #ffed4a;
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.4);
  }
`;

function PokerGame() {
  const { gameId } = useParams();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [gameData, setGameData] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ö–æ–¥–æ–≤ –∏ —Ç–∞–π–º–µ—Ä–∞
  const [turnTimer, setTurnTimer] = useState(10);
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(null);
  const [isPlayerTurn, setIsPlayerTurn] = useState(false);
  const [betAmount, setBetAmount] = useState(20); // –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
  const [currentBet, setCurrentBet] = useState(0); // –¢–µ–∫—É—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –∏–≥—Ä–µ
  const [isActionInProgress, setIsActionInProgress] = useState(false);
  const [lastActionTime, setLastActionTime] = useState(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç
  const [isDealing, setIsDealing] = useState(false);
  const [dealingCards, setDealingCards] = useState([]);
  const [dealingStep, setDealingStep] = useState(0);
  const [dealtCardsPerPlayer, setDealtCardsPerPlayer] = useState([0, 0, 0, 0]); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const [gameFinished, setGameFinished] = useState(false);

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç
  const sessionId = React.useMemo(() => gameId || Date.now().toString(), [gameId]);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–æ–ª–∞
  const tableDimensions = {
    width: 1200,
    height: 700
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
  const [showCards, setShowCards] = useState({});

  // –î–û–ë–ê–í–õ–ï–ù–û: Ref –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const timerIntervalRef = useRef(null);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º —Ö–æ–¥–∞
  useEffect(() => {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (timerIntervalRef.current) {
      clearInterval(timerIntervalRef.current);
      timerIntervalRef.current = null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–∞–π–º–µ—Ä
    if (gameData && gameData.status === 'playing' && gameData.settings?.currentTurn !== undefined && !isActionInProgress) {
      const currentPlayer = gameData.players[gameData.settings.currentTurn];
      const isRealPlayerTurn = currentPlayer && 
        currentPlayer.username === user?.username && 
        !currentPlayer.folded && 
        !currentPlayer.hasActed &&
        !currentPlayer.isBot;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ —Ç–æ–ª—å–∫–æ —Ä–∞–∑
      if (isRealPlayerTurn && !timerIntervalRef.current) {
        console.log(`[CLIENT] üïê –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${currentPlayer.username} –Ω–∞ 10 —Å–µ–∫—É–Ω–¥`);
        setTurnTimer(10); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        
        timerIntervalRef.current = setInterval(() => {
          setTurnTimer(prev => {
            if (prev <= 1) {
              console.log(`[CLIENT] ‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${currentPlayer.username}, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fold`);
              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
              clearInterval(timerIntervalRef.current);
              timerIntervalRef.current = null;
              handlePlayerAction('fold');
              return 10;
            }
            return prev - 1;
          });
        }, 1000);
      } else if (!isRealPlayerTurn && timerIntervalRef.current) {
        // –ï—Å–ª–∏ —Ö–æ–¥ –ù–ï —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        clearInterval(timerIntervalRef.current);
        timerIntervalRef.current = null;
        setTurnTimer(10);
      }
    } else if (timerIntervalRef.current) {
      // –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      clearInterval(timerIntervalRef.current);
      timerIntervalRef.current = null;
      setTurnTimer(10);
    }

    return () => {
      if (timerIntervalRef.current) {
        clearInterval(timerIntervalRef.current);
        timerIntervalRef.current = null;
      }
    };
  }, [gameData?.settings?.currentTurn, gameData?.status, user?.username, isActionInProgress]); // –£–ë–†–ê–õ–ò turnTimer –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
  const handleExit = async () => {
    if (gameData && user) {
      try {
        await axios.post(`${API_URL}/api/poker/${gameId}/status`, {
          userId: user.username,
          status: "finished"
        });
        navigate('/');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ —ñ–≥—Ä–∏:', err);
        navigate('/');
      }
    } else {
      navigate('/');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
  const handleNextGame = async () => {
    try {
      console.log(`[CLIENT] ================ –ó–ê–ü–†–û–° –°–õ–ï–î–£–Æ–©–ï–ô –ò–ì–†–´ ================`);
      console.log(`[CLIENT] –¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: ${gameId}, —Å—Ç–∞—Ç—É—Å: ${gameData?.status}`);
      
      const response = await axios.post(`${API_URL}/api/poker/${gameId}/next-game`);
      
      console.log(`[CLIENT] ================ –û–¢–í–ï–¢ –ü–û–õ–£–ß–ï–ù ================`);
      console.log(`[CLIENT] Success:`, response.data.success);
      console.log(`[CLIENT] –ù–æ–≤–∞—è –∏–≥—Ä–∞ ID:`, response.data.gameId);
      
      if (response.data.success && response.data.gameId) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É
        console.log(`[CLIENT] üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É: ${response.data.gameId}`);
        navigate(`/game/${response.data.gameId}`);
      } else {
        console.error('[CLIENT] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è
        if (response.data.canContinue === false) {
          console.log('[CLIENT] üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
          alert('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ñ–∏—à–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.');
        }
      }
      
    } catch (error) {
      console.error('[CLIENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      if (error.response?.status === 400) {
        const message = error.response.data?.message || '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É';
        console.log(`[CLIENT] üö´ ${message}`);
        alert(message);
      } else if (error.response?.status === 404) {
        console.log('[CLIENT] üö´ –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏');
        alert('–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      } else {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã');
      }
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
  useEffect(() => {
    const fetchGameData = async () => {
      try {
        setLoading(true);
        const response = await axios.get(`${API_URL}/api/poker/${gameId}`);
        console.log('–î–∞–Ω—ñ —ñ–≥—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ:', response.data);
                  setGameData(response.data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        if (response.data.status === 'finished' || response.data.status === 'eliminated') {
          console.log(`[CLIENT] –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${response.data.status}`);
          setGameFinished(true);
        } else {
          setGameFinished(false);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
        if (response.data.players && response.data.players.length > 0) {
          const maxBet = Math.max(...response.data.players.map(p => p.currentBet || 0));
          setCurrentBet(maxBet);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
          const minRaise = maxBet + (response.data.settings?.bigBlind || 20);
          setBetAmount(minRaise);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–π —Ö–æ–¥
        if (response.data.currentTurn !== undefined) {
          setCurrentPlayerIndex(response.data.currentTurn);
          const currentPlayer = response.data.players[response.data.currentTurn];
          const newIsPlayerTurn = currentPlayer && 
            !currentPlayer.isBot && 
            currentPlayer.username === user?.username && 
            !currentPlayer.folded;
          setIsPlayerTurn(newIsPlayerTurn);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
          setTurnTimer(10);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –µ–≥–æ —Ö–æ–¥
          if (currentPlayer && currentPlayer.isBot && !currentPlayer.folded && !currentPlayer.hasActed && response.data.status === 'playing') {
            console.log(`[CLIENT] –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ ${currentPlayer.username}`);
            setTimeout(async () => {
              try {
                await axios.post(`${API_URL}/api/poker/${gameId}/bot-action`);
                console.log(`[CLIENT] –ü–µ—Ä–≤—ã–π –±–æ—Ç ${currentPlayer.username} –∑–∞–ø—É—â–µ–Ω`);
              } catch (error) {
                console.error('[CLIENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞:', error);
              }
            }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
          }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        if (response.data.currentRound === 'preflop' && 
            response.data.players.some(p => p.cards && p.cards.length > 0) &&
            !isDealing) {
          startDealingAnimation(response.data);
        }
        
        setLoading(false);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑—Ü—ñ —ñ–≥—Ä–∏:', err);
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç–∏ —ñ–≥—Ä—É');
        setLoading(false);
      }
    };

    if (gameId && user) {
      fetchGameData();
    }
  }, [gameId, user]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ö–æ–¥–∞–º–∏ –±–æ—Ç–æ–≤
  useEffect(() => {
    if (!gameId || !user?.username) return;

    const interval = setInterval(async () => {
      try {
        console.log(`[CLIENT] –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∑–∞–ø—Ä–æ—Å –∫ –∏–≥—Ä–µ ${gameId}`);
        const response = await axios.get(`${API_URL}/api/poker/${gameId}`);
        
        if (response.data && response.data.id) {
          const newGameData = response.data;
          console.log(`[CLIENT] –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:`, {
            status: newGameData.status,
            currentRound: newGameData.settings?.currentRound,
            pot: newGameData.pot,
            currentTurn: newGameData.settings?.currentTurn,
            communityCards: newGameData.settings?.communityCards?.length || 0,
            showdown: newGameData.showdown
          });
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
          if (newGameData.players && newGameData.players.length > 0 && newGameData.settings) {
            setGameData(newGameData);
          } else {
            console.warn('[CLIENT] ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          }
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä
          if (newGameData.status === 'finished' || newGameData.status === 'eliminated') {
            if (!gameFinished) {
              console.log(`[CLIENT] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${newGameData.status}`);
              console.log(`[CLIENT] Showdown: ${newGameData.showdown}, –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${newGameData.winner}`);
              setGameFinished(true);
            }
            console.log('[CLIENT] üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            clearInterval(interval);
            return;
          } else if (newGameData.status === 'playing') {
            if (gameFinished) {
              console.log('[CLIENT] –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–π –∏–≥—Ä–µ');
              setGameFinished(false);
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
          if (newGameData.players && newGameData.players.length > 0) {
            const maxBet = Math.max(...newGameData.players.map(p => p.currentBet || 0));
            setCurrentBet(maxBet);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
            const minRaise = maxBet + (newGameData.settings?.bigBlind || 20);
            setBetAmount(minRaise);
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ–¥–∞
          if (newGameData.currentTurn !== undefined) {
            setCurrentPlayerIndex(newGameData.currentTurn);
            const currentPlayer = newGameData.players[newGameData.currentTurn];
            const newIsPlayerTurn = currentPlayer && 
              !currentPlayer.isBot && 
              currentPlayer.username === user?.username && 
              !currentPlayer.folded;
            setIsPlayerTurn(newIsPlayerTurn);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
            if (newIsPlayerTurn && gameData.currentTurn !== newGameData.currentTurn) {
              setTurnTimer(10);
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –µ–≥–æ —Ö–æ–¥
            if (currentPlayer && currentPlayer.isBot && !currentPlayer.folded && !currentPlayer.hasActed && newGameData.status === 'playing') {
              console.log(`[CLIENT] –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ ${currentPlayer.username}`);
              setTimeout(async () => {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
                const gameStatus = await axios.get(`${API_URL}/api/poker/${gameId}`);
                if (gameStatus.data.status !== 'playing') {
                  console.log(`[CLIENT] ‚èπÔ∏è –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${gameStatus.data.status}), –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è`);
                  return;
                }
                
                await axios.post(`${API_URL}/api/poker/${gameId}/bot-action`);
                console.log(`[CLIENT] –ë–æ—Ç ${currentPlayer.username} –∑–∞–ø—É—â–µ–Ω`);
              }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
            }
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ñ:', error);
      }
    }, 5000); // –£–í–ï–õ–ò–ß–ï–ù–û: –ò–Ω—Ç–µ—Ä–≤–∞–ª 5 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 2

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [gameData?.status, gameId, user?.username, gameFinished]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
  const handlePlayerAction = useCallback(async (action, amount = 0) => {
    console.log(`[CLIENT] ================ –û–¢–ü–†–ê–í–ö–ê –î–ï–ô–°–¢–í–ò–Ø ================`);
    
    // –£–°–ò–õ–ï–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ó–ê–ü–†–û–°–û–í
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ —Å–¥–µ–ª–∞–ª fold
    if (gameData?.players) {
      const currentPlayer = gameData.players.find(p => p.username === user?.username);
      if (currentPlayer?.folded) {
        console.warn('[CLIENT] ‚ö†Ô∏è –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª fold, –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ö–æ–¥ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const activePlayer = gameData.players[gameData.settings?.currentTurn];
      if (!activePlayer || activePlayer.username !== user?.username) {
        console.warn('[CLIENT] ‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
      if (activePlayer.hasActed) {
        console.warn('[CLIENT] ‚ö†Ô∏è –ò–≥—Ä–æ–∫ —É–∂–µ —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
        return;
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–µ–π—Å—Ç–≤–∏–π
    if (isActionInProgress) {
      console.warn('[CLIENT] ‚ö†Ô∏è –î—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return;
    }
    
    // 3. –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ - 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const now = Date.now();
    const timeSinceLastAction = now - lastActionTime;
    
    if (timeSinceLastAction < 2000) {
      console.warn(`[CLIENT] ‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –æ—Å—Ç–∞–ª–æ—Å—å ${Math.ceil((2000 - timeSinceLastAction) / 1000)} —Å–µ–∫—É–Ω–¥`);
      return;
    }

    console.log(`[CLIENT] –ò–≥—Ä–∞: ${gameId}, –î–µ–π—Å—Ç–≤–∏–µ: ${action}, –°—É–º–º–∞: ${amount}`);
    
    // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–õ–û–ö–ò–†–û–í–ö–ò
    setIsActionInProgress(true);
    setLastActionTime(now);

    try {
      const response = await axios.post(`${API_URL}/api/poker/${gameId}/action`, {
        userId: user?.username,
        action,
        amount
      });
      
      console.log(`[CLIENT] ================ –û–¢–í–ï–¢ –ü–û–õ–£–ß–ï–ù ================`);
      console.log(`[CLIENT] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:`, response.status);
      console.log(`[CLIENT] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, response.data);
      console.log(`[CLIENT] –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:`, {
        pot: response.data.pot,
        currentTurn: response.data.settings?.currentTurn,
        status: response.data.status
      });
      
      // –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É
      if (response.data.redirectToNewGame && response.data.newGameId) {
        console.log(`[CLIENT] –ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–æ–≤–æ–π ${response.data.newGameId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É
        window.history.replaceState(null, '', `/poker/${response.data.newGameId}`);
        
        // –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–π –∏–≥—Ä–µ —Å —Ç–µ–º –∂–µ –¥–µ–π—Å—Ç–≤–∏–µ–º
        try {
          const newResponse = await axios.post(`${API_URL}/api/poker/${response.data.newGameId}/action`, {
            userId: user?.username,
            action,
            amount
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
          setGameData(newResponse.data);
          console.log(`[CLIENT] –î–µ–π—Å—Ç–≤–∏–µ ${action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ –Ω–æ–≤–æ–π –∏–≥—Ä–µ`);
          
        } catch (newError) {
          console.error('[CLIENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–æ–≤–æ–π –∏–≥—Ä–µ:', newError);
        }
        
        return;
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (response.data && response.data.players && response.data.settings) {
        setGameData(response.data);
      } else {
        console.warn('[CLIENT] ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ');
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try {
          const freshData = await axios.get(`${API_URL}/api/poker/${gameId}`);
          if (freshData.data && freshData.data.players && freshData.data.settings) {
            setGameData(freshData.data);
          }
        } catch (freshError) {
          console.error('[CLIENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', freshError);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
      if (response.data.players && response.data.players.length > 0) {
        const maxBet = Math.max(...response.data.players.map(p => p.currentBet || 0));
        setCurrentBet(maxBet);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
        const minRaise = maxBet + (response.data.settings?.bigBlind || 20);
        setBetAmount(minRaise);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ–¥–∞
      if (response.data.currentTurn !== undefined) {
        setCurrentPlayerIndex(response.data.currentTurn);
        const currentPlayer = response.data.players[response.data.currentTurn];
        const newIsPlayerTurn = currentPlayer && 
          !currentPlayer.isBot && 
          currentPlayer.username === user?.username && 
          !currentPlayer.folded;
        setIsPlayerTurn(newIsPlayerTurn);
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      setTurnTimer(10);
      
      console.log(`[CLIENT] ================ –î–ï–ô–°–¢–í–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ================`);
      console.log(`–Ü–≥—Ä–æ–∫ –∑—Ä–æ–±–∏–≤ ${action}`, response.data);
      
      console.log(`[CLIENT] –î–µ–π—Å—Ç–≤–∏–µ "${action}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    } catch (error) {
      console.error('[CLIENT] ‚ö†Ô∏è –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:', error);
      
      if (error.response?.status === 429) {
        console.error('[CLIENT] –î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      } else {
        console.error('[CLIENT] –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:', error.message);
      }
    } finally {
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setIsActionInProgress(false);
      }, 1500);
    }
  }, [gameData, isActionInProgress, lastActionTime, gameId, user?.username]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
  useEffect(() => {
    if (!gameId) return;

    const interval = setInterval(async () => {
      // –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
      if (gameData?.status === 'finished') {
        console.log('[CLIENT] üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        clearInterval(interval);
        return;
      }

      try {
        const response = await axios.get(`${API_URL}/api/poker/${gameId}`);
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (response.data && response.data.id) {
          setGameData(response.data);
        } else {
          console.warn('[CLIENT] ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã');
        }
      } catch (error) {
        // –î–û–ë–ê–í–õ–ï–ù–û: –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (error.response?.status === 404) {
          console.warn('[CLIENT] üö´ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          clearInterval(interval);
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω—ñ—ó:', error);
        }
      }
    }, 8000); // –£–í–ï–õ–ò–ß–ï–ù–û: –∏–Ω—Ç–µ—Ä–≤–∞–ª 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

    return () => clearInterval(interval);
  }, [gameId, gameData?.status]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
  const handleJoinGame = async () => {
    try {
      const response = await axios.post(`${API_URL}/api/poker/${gameId}/join`, {
        userId: user?.username,
        username: user?.username
      });
      
      if (response.data) {
        setGameData(response.data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –≥—Ä–∏:', error);
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤ - —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ –ë–î
  const getPlayerPositions = () => {
    if (!gameData?.players) return {};
    
    const positions = {};
    const dealerPosition = gameData.settings?.dealerPosition || 0;
    const playersCount = gameData.players.length;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–ª–µ—Ä–∞
    gameData.players.forEach((player, index) => {
      const isDealer = index === dealerPosition;
      const isSmallBlind = index === (dealerPosition + 1) % playersCount;
      const isBigBlind = index === (dealerPosition + 2) % playersCount;
      const isUTG = index === (dealerPosition + 3) % playersCount; // Under the gun
      
      positions[index] = {
        isDealer,
        isSmallBlind,
        isBigBlind,
        isUTG
      };
    });
    
    return positions;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç–æ–ª–µ
  const getFixedPlayerPosition = (playerId) => {
    if (!gameData?.players || !user?.username) return null;
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const realPlayerIndex = gameData.players.findIndex(p => 
      p.username === user.username
    );
    
    if (realPlayerIndex === -1) return null;
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    const currentPlayerIndex = gameData.players.findIndex(p => 
      p._id === playerId || p.username === playerId
    );
    
    if (currentPlayerIndex === -1) return null;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    let relativePosition = (currentPlayerIndex - realPlayerIndex + gameData.players.length) % gameData.players.length;
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: 0 = —Å–Ω–∏–∑—É (–∏–≥—Ä–æ–∫), 1 = —Å–ª–µ–≤–∞, 2 = —Å–≤–µ—Ä—Ö—É, 3 = —Å–ø—Ä–∞–≤–∞
    const positionMap = {
      0: 'player',    // —Å–Ω–∏–∑—É - –≤—Å–µ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫
      1: 'leftBot',   // —Å–ª–µ–≤–∞
      2: 'topBot',    // —Å–≤–µ—Ä—Ö—É  
      3: 'rightBot'   // —Å–ø—Ä–∞–≤–∞
    };
    
    return positionMap[relativePosition] || null;
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
  const getPlayerAtPosition = (positionName) => {
    if (!gameData?.players || !user?.username) return null;
    
    // –ò—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ username –≤–º–µ—Å—Ç–æ user._id
    const realPlayerIndex = gameData.players.findIndex(p => 
      !p.isBot && p.username === user.username
    );
    
    if (realPlayerIndex === -1) return null;
    
    const positionOffset = {
      'player': 0,
      'leftBot': 1,
      'topBot': 2,
      'rightBot': 3
    };
    
    const targetIndex = (realPlayerIndex + positionOffset[positionName]) % gameData.players.length;
    return gameData.players[targetIndex] || null;
  };

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  const playerPositions = getPlayerPositions();

  // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç
  const startDealingAnimation = (gameData) => {
    if (!gameData || !gameData.players) return;
    
    setIsDealing(true);
    setDealingStep(0);
    setDealtCardsPerPlayer([0, 0, 0, 0]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ä—Ç
    
    // –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–∏–ª–µ—Ä–∞
    const dealerIndex = gameData.players.findIndex(p => p.isDealer);
    if (dealerIndex === -1) return;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ (–ø–æ 2 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É)
    const cardsToDeaL = [];
    for (let round = 0; round < 2; round++) {
      for (let playerIndex = 0; playerIndex < gameData.players.length; playerIndex++) {
        cardsToDeaL.push({
          targetPlayer: playerIndex,
          round: round,
          delay: (round * gameData.players.length + playerIndex) * 200 // 200–º—Å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
        });
      }
    }
    
    setDealingCards(cardsToDeaL);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    cardsToDeaL.forEach((card, index) => {
            setTimeout(() => {
        setDealingStep(index + 1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–∞
        setDealtCardsPerPlayer(prev => {
          const newCounts = [...prev];
          newCounts[card.targetPlayer] = Math.min(newCounts[card.targetPlayer] + 1, 2);
          return newCounts;
        });
        
        // –ö–æ–≥–¥–∞ –≤—Å–µ –∫–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (index === cardsToDeaL.length - 1) {
          setTimeout(() => {
            setIsDealing(false);
            setDealingCards([]);
            setDealingStep(0);
            // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º dealtCardsPerPlayer - –æ—Å—Ç–∞–≤–ª—è–µ–º [2,2,2,2]
          }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        }
      }, card.delay);
    });
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
  const getCardsForPlayer = (player, isBot) => {
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (player.cards && player.cards.length > 0) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ hidden, —á—Ç–æ–±—ã –∫–∞—Ä—Ç—ã –Ω–µ —Ç–µ—Ä—è–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
      // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–±–ª–æ–∂–∫–∏ –∫–∞—Ä—Ç –±–æ—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ PokerPlayer
      return player.cards.map(card => ({
        suit: card.suit,
        value: card.value
        // –£–±—Ä–∞–ª–∏ hidden —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
      }));
    }
    
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  };

  // –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –±–ª–∞–π–Ω–¥—ã
  const getCurrentBetForPlayer = (player, playerIndex) => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (player.currentBet && player.currentBet > 0) {
      return player.currentBet;
    }
    
    // –í–†–ï–ú–ï–ù–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–∞–π–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
    if (gameData && gameData.status === 'playing') {
      const dealerPosition = gameData.settings?.dealerPosition || 0;
      const smallBlindPosition = (dealerPosition + 1) % gameData.players.length;
      const bigBlindPosition = (dealerPosition + 2) % gameData.players.length;
      
      if (playerIndex === smallBlindPosition) {
        return 10; // Small blind
      } else if (playerIndex === bigBlindPosition) {
        return 20; // Big blind
      }
    }
    
    return 0;
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (loading) {
  return (
      <div className="relative w-full h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</div>
          </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (error) {
  return (
      <div className="relative w-full h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-red-500 text-xl">{error}</div>
            <button 
          onClick={() => navigate('/')}
          className="ml-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
            >
          –ù–∞ –≥–æ–ª–æ–≤–Ω—É
            </button>
          </div>
    );
  }

  return (
    <div className="relative w-full h-screen bg-gray-900 overflow-hidden flex items-center justify-center">
      {/* CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ */}
      <style>{sliderStyles}</style>
      
      <ToastContainer />
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª */}
      <div className="absolute top-4 right-4 flex gap-2 z-50">
        {/* –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ */}
        {gameFinished && gameData && gameData.status === 'finished' && (
          <button 
            onClick={handleNextGame}
            className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded font-bold"
          >
            –ù–∞—Å—Ç—É–ø–Ω–∞ –≥—Ä–∞
          </button>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
        <button 
          onClick={handleExit}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
        >
          –í–∏–π—Ç–∏
        </button>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–µ - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª */}
        {gameData && (
        <div className="absolute top-4 left-4 z-50">
          <div className="bg-black bg-opacity-70 rounded-lg p-3 text-white text-sm">
            <div className="font-bold">üí∞ –ë–∞–Ω–∫: {gameData.pot || 0}</div>
            <div>üéØ –†–∞—É–Ω–¥: {gameData.currentRound || 'preflop'}</div>
            <div>üìä –°—Ç–∞—Ç—É—Å: {gameData.status === 'finished' ? '–∑–∞–≤–µ—Ä—à–µ–Ω–æ' : gameData.status === 'playing' ? '–≥—Ä–∞—î' : '–æ—á—ñ–∫—É—î'}</div>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ */}
            {gameFinished && gameData.winner && (
              <div className="mt-2 pt-2 border-t border-gray-600">
                <div className="text-yellow-400 font-bold">üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {gameData.winner}</div>
                {gameData.winningHand && (
                  <div className="text-xs text-gray-300">{gameData.winningHand}</div>
                )}
              </div>
            )}
            
            {gameData.settings && (
              <div className="text-xs mt-1">
                SB: {gameData.settings.smallBlind} / BB: {gameData.settings.bigBlind}
                </div>
              )}
            {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="text-xs mt-2 text-yellow-300">
              –î–∏–ª–µ—Ä: {gameData.dealerPosition !== undefined ? gameData.dealerPosition : '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}
            </div>
            <div className="text-xs text-green-300">
              –ü–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥: {gameData.currentTurn !== undefined ? gameData.currentTurn : '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}
            </div>
            <div className="text-xs text-blue-300">
              –ú—ñ–π —Ö—ñ–¥: {isPlayerTurn ? '–¢–ê–ö' : '–ù–Ü'}
            </div>

            </div>
          </div>
        )}

      {/* –ü–æ–∫–µ—Ä–Ω—ã–π —Å—Ç–æ–ª */}
        <div
        className="relative rounded-[100px] shadow-2xl"
                    style={{
          width: tableDimensions.width,
          height: tableDimensions.height,
            backgroundImage: 'url(/BG/poker-table_no_fone.png)',
            backgroundSize: '100% 100%',
            backgroundPosition: 'center',
          border: '6px solid #2D2D2D'
        }}
      >
        {/* –ë–∞–Ω–∫ —Å—Ç–æ–ª–∞ - –≤ —Ü–µ–Ω—Ç—Ä–µ */}
        {gameData && (gameData.pot > 0 || gameData.status === 'finished') && (
          <div className="absolute top-[18%] left-[34%] transform -translate-x-1/2 z-40">
            <div className="bg-gray-800 bg-opacity-80 text-white text-lg font-bold px-4 py-2 rounded-full shadow-lg border border-gray-600">
              POT: {gameData.pot || 0}
              </div>
                </div>
              )}
        {/* –ò–≥—Ä–æ–∫ - —Å–Ω–∏–∑—É */}
        {(() => {
          const player = getPlayerAtPosition('player');
          if (!player) return null;
          const playerIndex = player.position; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º position –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ _id
          return (
            <div className="absolute bottom-[10%] left-1/2 transform -translate-x-1/2">
                  <PokerPlayer 
                player={{
                  ...player,
                  currentBet: getCurrentBetForPlayer(player, playerIndex)
                }}
                    isSelf={player.username === user?.username} 
                cards={getCardsForPlayer(player, player.isBot)}
                angle={0}
                isDealer={playerPositions[playerIndex]?.isDealer || false}
                isSmallBlind={playerPositions[playerIndex]?.isSmallBlind || false}
                isBigBlind={playerPositions[playerIndex]?.isBigBlind || false}
                isUTG={playerPositions[playerIndex]?.isUTG || false}
                isCurrentTurn={gameData?.currentTurn === playerIndex}
                turnTimer={gameData?.currentTurn === playerIndex ? turnTimer : 10}
                gameStatus={gameData?.status || 'playing'}
                isWinner={gameData?.winner === player.username}
                winningCards={player.winningCards || []}
                dealtCardsCount={dealtCardsPerPlayer[playerIndex] || 2}
                showdown={gameData?.showdown || false}
                  />
                </div>
          );
        })()}
              
        {/* Bot 1 - —Å–ª–µ–≤–∞ */}
        {(() => {
          const player = getPlayerAtPosition('leftBot');
          if (!player) return null;
          const playerIndex = player.position; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º position –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ _id
          return (
            <div className="absolute left-[5%] top-1/2 transform -translate-y-1/2">
                  <PokerPlayer 
                player={{
                  ...player,
                  currentBet: getCurrentBetForPlayer(player, playerIndex)
                }}
                    isSelf={false} 
                cards={getCardsForPlayer(player, player.isBot)}
                angle={90}
                isDealer={playerPositions[playerIndex]?.isDealer || false}
                isSmallBlind={playerPositions[playerIndex]?.isSmallBlind || false}
                isBigBlind={playerPositions[playerIndex]?.isBigBlind || false}
                isUTG={playerPositions[playerIndex]?.isUTG || false}
                isCurrentTurn={gameData?.currentTurn === playerIndex}
                turnTimer={gameData?.currentTurn === playerIndex ? turnTimer : 10}
                gameStatus={gameData?.status || 'playing'}
                isWinner={gameData?.winner === player.username}
                winningCards={player.winningCards || []}
                dealtCardsCount={dealtCardsPerPlayer[playerIndex] || 2}
                showdown={gameData?.showdown || false}
                  />
                </div>
          );
        })()}
              
        {/* Bot 2 - —Å–≤–µ—Ä—Ö—É */}
        {(() => {
          const player = getPlayerAtPosition('topBot');
          if (!player) return null;
          const playerIndex = player.position; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º position –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ _id
          return (
            <div className="absolute top-[5%] left-1/2 transform -translate-x-1/2">
                  <PokerPlayer 
                player={{
                  ...player,
                  currentBet: getCurrentBetForPlayer(player, playerIndex)
                }}
                    isSelf={false} 
                cards={getCardsForPlayer(player, player.isBot)}
                angle={180}
                isDealer={playerPositions[playerIndex]?.isDealer || false}
                isSmallBlind={playerPositions[playerIndex]?.isSmallBlind || false}
                isBigBlind={playerPositions[playerIndex]?.isBigBlind || false}
                isUTG={playerPositions[playerIndex]?.isUTG || false}
                isCurrentTurn={gameData?.currentTurn === playerIndex}
                turnTimer={gameData?.currentTurn === playerIndex ? turnTimer : 10}
                gameStatus={gameData?.status || 'playing'}
                isWinner={gameData?.winner === player.username}
                winningCards={player.winningCards || []}
                dealtCardsCount={dealtCardsPerPlayer[playerIndex] || 2}
                showdown={gameData?.showdown || false}
                  />
                </div>
          );
        })()}
              
        {/* Bot 3 - —Å–ø—Ä–∞–≤–∞ */}
        {(() => {
          const player = getPlayerAtPosition('rightBot');
          if (!player) return null;
          const playerIndex = player.position; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º position –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ _id
          return (
            <div className="absolute right-[5%] top-1/2 transform -translate-y-1/2">
                  <PokerPlayer 
                player={{
                  ...player,
                  currentBet: getCurrentBetForPlayer(player, playerIndex)
                }}
                    isSelf={false} 
                cards={getCardsForPlayer(player, player.isBot)}
                angle={270}
                isDealer={playerPositions[playerIndex]?.isDealer || false}
                isSmallBlind={playerPositions[playerIndex]?.isSmallBlind || false}
                isBigBlind={playerPositions[playerIndex]?.isBigBlind || false}
                isUTG={playerPositions[playerIndex]?.isUTG || false}
                isCurrentTurn={gameData?.currentTurn === playerIndex}
                turnTimer={gameData?.currentTurn === playerIndex ? turnTimer : 10}
                gameStatus={gameData?.status || 'playing'}
                isWinner={gameData?.winner === player.username}
                winningCards={player.winningCards || []}
                dealtCardsCount={dealtCardsPerPlayer[playerIndex] || 2}
                showdown={gameData?.showdown || false}
                  />
                </div>
          );
        })()}
              
        {/* –û–±—â–∏–µ –∫–∞—Ä—Ç—ã */}
        {gameData?.settings?.communityCards && gameData.settings.communityCards.length > 0 && (
          <div className="absolute top-[40%] left-1/2 transform -translate-x-1/2 flex gap-2">
            {gameData.settings.communityCards.map((card, index) => (
              <img
                key={`community-${card.suit}-${card.value}-${index}-${gameData.settings.currentRound}`}
                src={getCardImage(card)}
                alt={`${card.value}${card.suit}`}
                className="w-16 h-24 rounded shadow-lg border border-gray-300 transition-all duration-300"
                style={{
                  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)'
                }}
              />
            ))}
          </div>
        )}
              
        {/* –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç */}
        {isDealing && dealingCards.length > 0 && (
          <div className="absolute inset-0 pointer-events-none z-50">
            {dealingCards.slice(0, dealingStep).map((cardInfo, index) => {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
              const dealerPosition = getPlayerAtPosition('player') ? { x: '50%', y: '85%' } : 
                                   getPlayerAtPosition('leftBot') ? { x: '15%', y: '50%' } :
                                   getPlayerAtPosition('topBot') ? { x: '50%', y: '15%' } :
                                   { x: '85%', y: '50%' }; // rightBot
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
              const targetPositions = {
                0: { x: '50%', y: '85%' }, // player
                1: { x: '15%', y: '50%' }, // leftBot  
                2: { x: '50%', y: '15%' }, // topBot
                3: { x: '85%', y: '50%' }  // rightBot
              };
              
              const targetPos = targetPositions[cardInfo.targetPlayer] || { x: '50%', y: '50%' };
              
              return (
                <div
                  key={`dealing-${index}`}
                  className="absolute w-12 h-16 transition-all duration-500 ease-out"
                  style={{
                    left: dealerPosition.x,
                    top: dealerPosition.y,
                    transform: 'translate(-50%, -50%)',
                    animation: `dealCard-${cardInfo.targetPlayer} 0.5s ease-out forwards`,
                    animationDelay: `${index * 50}ms`
                  }}
                >
                  <img
                    src="/cards/Back.png"
                    alt="–†–∞–∑–¥–∞–≤–∞–µ–º–∞—è –∫–∞—Ä—Ç–∞"
                    className="w-full h-full rounded shadow-lg border border-gray-300"
                    style={{
                      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.3)'
                    }}
                  />
                </div>
              );
            })}
            </div>
          )}
      </div>
      
      {/* CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç */}
      <style>{`
        @keyframes dealCard-0 {
          to {
            left: 50%;
            top: 85%;
          }
        }
        @keyframes dealCard-1 {
          to {
            left: 15%;
            top: 50%;
          }
        }
        @keyframes dealCard-2 {
          to {
            left: 50%;
            top: 15%;
          }
        }
        @keyframes dealCard-3 {
          to {
            left: 85%;
            top: 50%;
          }
        }
      `}</style>
      
      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ */}
      {gameData?.status === 'waiting' && (
        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
                  <button 
            className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded"
            onClick={handleJoinGame}
                  >
            –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ–≥—Ä–∏
                  </button>
                  </div>
          )}
          
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞ */}
      {gameData?.status === 'playing' && (
        <div className="absolute bottom-32 right-6 flex flex-col items-end gap-3 z-40">
          {/* –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö */}
          <div className="grid grid-cols-4 gap-2">
            {[33, 50, 75, 100].map(percent => {
              const currentPlayer = gameData.players[gameData.currentTurn] || {};
              const ourPlayer = gameData.players.find(p => p.username === user?.username) || {}; // –î–û–ë–ê–í–õ–ï–ù–û: –Ω–∞—Ö–æ–¥–∏–º –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
              const playerChips = currentPlayer.chips || 1000;
              const maxPossibleBet = Math.min((currentPlayer.currentBet || 0) + playerChips, 1000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1000
              const potBet = Math.floor((percent / 100) * playerChips);
              const minRaise = currentBet + 20;
              const maxPlayerBet = Math.min(Math.max(potBet + (currentPlayer.currentBet || 0), minRaise), maxPossibleBet);
              const isDisabled = !isPlayerTurn || ourPlayer.folded || playerChips === 0 || maxPlayerBet < minRaise;
              return (
                <button 
                  key={percent}
                  onClick={() => !isDisabled && setBetAmount(maxPlayerBet)}
                  disabled={isDisabled}
                  className={`text-white text-xs font-bold py-2 px-3 rounded-lg transition-all ${
                    isDisabled 
                      ? 'bg-gray-800 opacity-50 cursor-not-allowed' 
                      : 'bg-gray-700 hover:bg-gray-600'
                  }`}
                >
                  {percent}%
                </button>
              );
            })}
          </div>

          {/* –ü–æ–ª–∑—É–Ω–æ–∫ —Å—Ç–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞ */}
          <div className="flex items-center gap-3 min-w-80">
            <span className="text-white text-sm">{currentBet + 20}</span>
            <input 
              type="range" 
              min={currentBet + 20}
              max={Math.min((gameData.players[gameData.currentTurn]?.currentBet || 0) + (gameData.players[gameData.currentTurn]?.chips || 1000), 1000)}
              step="10"
              value={betAmount}
              onChange={(e) => setBetAmount(parseInt(e.target.value))}
              disabled={!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || (gameData.players[gameData.currentTurn]?.chips || 0) === 0}
              className={`flex-1 h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider ${
                                  (!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || (gameData.players[gameData.currentTurn]?.chips || 0) === 0) ? 'opacity-50' : ''
              }`}
              style={{
                background: `linear-gradient(to right, #ffd700 0%, #ffd700 ${((betAmount-(currentBet+20))/(Math.min((gameData.players[gameData.currentTurn]?.currentBet || 0) + (gameData.players[gameData.currentTurn]?.chips || 1000), 1000)-(currentBet+20)))*100}%, #374151 ${((betAmount-(currentBet+20))/(Math.min((gameData.players[gameData.currentTurn]?.currentBet || 0) + (gameData.players[gameData.currentTurn]?.chips || 1000), 1000)-(currentBet+20)))*100}%, #374151 100%)`
              }}
            />
            <span className="text-white text-sm">{Math.min((gameData.players[gameData.currentTurn]?.currentBet || 0) + (gameData.players[gameData.currentTurn]?.chips || 1000), 1000)}</span>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex gap-2">
            <button 
              onClick={() => handlePlayerAction('fold')}
              disabled={!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || isActionInProgress}
              className={`text-white font-bold py-3 px-6 rounded-xl shadow-lg transition-all duration-300 ${
                (!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || isActionInProgress)
                  ? 'bg-gray-800 opacity-50 cursor-not-allowed'
                  : 'bg-red-600 hover:bg-red-700 hover:scale-105'
              }`}
            >
              {isActionInProgress ? '...' : 'Fold'}
            </button>

            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Check —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ —Ä–∞–≤–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π */}
            {(gameData.players[gameData.currentTurn]?.currentBet || 0) === currentBet ? (
              <button 
                onClick={() => handlePlayerAction('check')}
                disabled={!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || isActionInProgress}
                className={`text-white font-bold py-3 px-6 rounded-xl shadow-lg transition-all duration-300 ${
                  (!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || isActionInProgress)
                    ? 'bg-gray-800 opacity-50 cursor-not-allowed'
                    : 'bg-blue-600 hover:bg-blue-700 hover:scale-105'
                }`}
              >
                {isActionInProgress ? '...' : 'Check'}
              </button>
            ) : (
              <button
                onClick={() => handlePlayerAction('call')}
                disabled={!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || (gameData.players[gameData.currentTurn]?.chips || 0) < (currentBet - (gameData.players[gameData.currentTurn]?.currentBet || 0)) || isActionInProgress}
                className={`text-white font-bold py-3 px-6 rounded-xl shadow-lg transition-all duration-300 ${
                  (!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || (gameData.players[gameData.currentTurn]?.chips || 0) < (currentBet - (gameData.players[gameData.currentTurn]?.currentBet || 0)) || isActionInProgress)
                    ? 'bg-gray-800 opacity-50 cursor-not-allowed'
                    : 'bg-green-600 hover:bg-green-700 hover:scale-105'
                }`}
              >
                {isActionInProgress ? '...' : `Call ${currentBet - (gameData.players[gameData.currentTurn]?.currentBet || 0)}`}
              </button>
            )}

            <button
              onClick={() => handlePlayerAction('bet', Math.min(betAmount, (gameData.players[gameData.currentTurn]?.currentBet || 0) + (gameData.players[gameData.currentTurn]?.chips || 1000)))}
              disabled={!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || (gameData.players[gameData.currentTurn]?.chips || 0) === 0 || isActionInProgress}
              className={`text-white font-bold py-3 px-6 rounded-xl shadow-lg transition-all duration-300 ${
                (!isPlayerTurn || (gameData.players.find(p => p.username === user?.username)?.folded) || (gameData.players[gameData.currentTurn]?.chips || 0) === 0 || isActionInProgress)
                  ? 'bg-gray-800 opacity-50 cursor-not-allowed'
                  : 'bg-orange-600 hover:bg-orange-700 hover:scale-105'
              }`}
            >
              {isActionInProgress ? '...' : `${currentBet > 0 ? 'Raise' : 'Bet'} ${Math.min(betAmount, (gameData.players[gameData.currentTurn]?.currentBet || 0) + (gameData.players[gameData.currentTurn]?.chips || 1000))}`}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default PokerGame; 
