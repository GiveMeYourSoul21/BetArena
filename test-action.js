async function testPokerAction() {
  try {
    console.log('üéØ –°–æ–∑–¥–∞–µ–º –ø–æ–∫–µ—Ä–Ω—É—é –∏–≥—Ä—É...');
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    const createResponse = await fetch('http://localhost:3002/api/poker/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: 8
      })
    });
    
    const createData = await createResponse.json();
    if (!createResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', createData);
      return;
    }
    
    console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', createData);
    const gameId = createData.gameId;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ...');
    const gameResponse = await fetch(`http://localhost:3002/api/poker/${gameId}`);
    const gameData = await gameResponse.json();
    
    if (gameResponse.ok) {
      console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:');
      console.log('- currentTurn:', gameData.currentTurn);
      console.log('- –ò–≥—Ä–æ–∫–∏:');
      gameData.players.forEach((p, i) => {
        console.log(`  ${i}: user=${p.user}, username=${p.username}, isBot=${p.isBot}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç
      const currentPlayer = gameData.players[gameData.currentTurn];
      if (currentPlayer && currentPlayer.isBot) {
        console.log('‚ö†Ô∏è –°–µ–π—á–∞—Å —Ö–æ–¥ —É –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å...');
        
        // –ü–æ–¥–æ–∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        console.log('‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        const gameResponse2 = await fetch(`http://localhost:3002/api/poker/${gameId}`);
        const gameData2 = await gameResponse2.json();
        
        if (gameResponse2.ok) {
          console.log('üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:');
          console.log('- currentTurn:', gameData2.currentTurn);
          const newCurrentPlayer = gameData2.players[gameData2.currentTurn];
          console.log(`- –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: ${newCurrentPlayer.username} (–±–æ—Ç: ${newCurrentPlayer.isBot})`);
          
          if (!newCurrentPlayer.isBot && newCurrentPlayer.user == 8) {
            console.log('‚úÖ –¢–µ–ø–µ—Ä—å —Ö–æ–¥ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            // –û–±–Ω–æ–≤–ª—è–µ–º gameData –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            Object.assign(gameData, gameData2);
          } else {
            console.log('‚ùå –•–æ–¥ –≤—Å–µ –µ—â–µ –Ω–µ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è');
            return;
          }
        }
      } else if (currentPlayer && currentPlayer.user != 8) {
        console.log('‚ùå –•–æ–¥ –Ω–µ —É –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID 8), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
        return;
      }
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É:', gameData);
    }
    
    console.log('üéØ –î–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ call...');
    
    // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const actionResponse = await fetch(`http://localhost:3002/api/poker/${gameId}/action`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: 8,
        action: 'call',
        amount: 0
      })
    });
    
    const actionData = await actionResponse.json();
    
    if (actionResponse.ok) {
      console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(actionData, null, 2));
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:');
      console.error('–°—Ç–∞—Ç—É—Å:', actionResponse.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', actionData);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testPokerAction(); 