async function testCreateDetail() {
  try {
    console.log('üéØ –î–µ—Ç–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏...');
    
    const response = await fetch('http://localhost:3002/api/poker/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: 8
      })
    });
    
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –ì—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
      console.log('üìä –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(data, null, 2));
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –≥—Ä–∏
      const gameResponse = await fetch(`http://localhost:3002/api/poker/${data.gameId}`);
      const gameData = await gameResponse.json();
      
      if (gameResponse.ok) {
        console.log('üìä –ü–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≥—Ä–∏:');
        console.log('- ID:', gameData.id);
        console.log('- –°—Ç–∞—Ç—É—Å:', gameData.status);
        console.log('- CurrentTurn:', gameData.currentTurn);
        console.log('- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤:', gameData.players.length);
        console.log('- –ì—Ä–∞–≤—Ü—ñ:');
        gameData.players.forEach((p, i) => {
          console.log(`  ${i}: user=${p.user}, username="${p.username}", isBot=${p.isBot}, position=${p.position}`);
        });
      } else {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –≥—Ä–∏:', gameData);
      }
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏:', data);
    }
    
  } catch (error) {
    console.error('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
  }
}

testCreateDetail(); 