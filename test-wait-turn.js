async function testWaitTurn() {
  try {
    console.log('üéØ –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É —ñ —á–µ–∫–∞—î–º–æ —Ö–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è...');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É
    const createResponse = await fetch('http://localhost:3002/api/poker/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: 8
      })
    });
    
    const createData = await createResponse.json();
    if (!createResponse.ok) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏:', createData);
      return;
    }
    
    console.log('‚úÖ –ì—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞, ID:', createData.gameId);
    const gameId = createData.gameId;
    
    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –¥—ñ–π–¥–µ —Ö–æ–¥ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è (userId=8)
    let attempts = 0;
    const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    
    while (attempts < maxAttempts) {
      console.log(`‚è≥ –°–ø—Ä–æ–±–∞ ${attempts + 1}/${maxAttempts} - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏...`);
      
      const gameResponse = await fetch(`http://localhost:3002/api/poker/${gameId}`);
      const gameData = await gameResponse.json();
      
      if (!gameResponse.ok) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∏:', gameData);
        return;
      }
      
      const currentPlayer = gameData.players[gameData.currentTurn];
      console.log(`üë§ –ó–∞—Ä–∞–∑ —Ö–æ–¥ —É: ${currentPlayer?.username} (–ø–æ–∑–∏—Ü—ñ—è ${gameData.currentTurn}), –±–æ—Ç: ${currentPlayer?.isBot}`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ö–æ–¥ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
      if (currentPlayer && !currentPlayer.isBot && currentPlayer.user == 8) {
        console.log('üéâ –•–û–î –£ –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–ê–í–¶–Ø! –†–æ–±–∏–º–æ –¥—ñ—é call...');
        
        const actionResponse = await fetch(`http://localhost:3002/api/poker/${gameId}/action`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            userId: 8,
            action: 'call',
            amount: 0
          })
        });
        
        const actionData = await actionResponse.json();
        
        if (actionResponse.ok) {
          console.log('‚úÖ –î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(actionData, null, 2));
          return;
        } else {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ—ó:', actionData);
          return;
        }
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≥—Ä–∏
      if (gameData.status !== 'playing') {
        console.log(`‚ùå –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: ${gameData.status}`);
        return;
      }
      
      // –ß–µ–∫–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É —ñ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempts++;
    }
    
    console.log('‚ùå –¢–∞–π–º-–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ö–æ–¥—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è');
    
  } catch (error) {
    console.error('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
  }
}

testWaitTurn(); 