const http = require('http');
const { createDeck, shuffleDeck, dealCards, validateGameCards } = require('./server/utils/pokerUtils');

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3002,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve(jsonData);
        } catch (err) {
          reject(new Error(`Parse error: ${err.message}, body: ${body}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testRandomCards() {
  console.log('üÉè –¢–ï–°–¢ –°–õ–£–ß–ê–ô–ù–û–°–¢–ò –ö–ê–†–¢');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä –ø–æ–¥—Ä—è–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç
    for (let i = 1; i <= 3; i++) {
      console.log(`\n=== –ò–≥—Ä–∞ ${i} ===`);
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...');
      const createData = await makeRequest('/api/poker/create', 'POST', {
        userId: 10,
        gameType: 'texas-holdem'
      });
      
      console.log('–û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', createData);
      const gameId = createData.gameId;
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞: ${gameId}`);
      
      if (!gameId) {
        console.error('–ù–µ –ø–æ–ª—É—á–µ–Ω gameId!');
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
      console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã...');
      const gameData = await makeRequest(`/api/poker/${gameId}`);
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:', Object.keys(gameData));
      
      if (!gameData.players) {
        console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö!');
        continue;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      console.log('–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:');
      gameData.players.forEach((player, index) => {
        if (player.cards && player.cards.length >= 2) {
          const card1 = `${player.cards[0].value} ${player.cards[0].suit}`;
          const card2 = `${player.cards[1].value} ${player.cards[1].suit}`;
          console.log(`  ${index}: ${player.username} - ${card1}, ${card2}`);
        } else {
          console.log(`  ${index}: ${player.username} - –ù–ï–¢ –ö–ê–†–¢`);
        }
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç—ã –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message, error.stack);
  }
}

async function testRounds() {
  console.log('\nüéØ –¢–ï–°–¢ –§–õ–û–ü–ê/–¢–ï–†–ù–ê/–†–ò–í–ï–†–ê');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    const createData = await makeRequest('/api/poker/create', 'POST', {
      userId: 10,
      gameType: 'texas-holdem'
    });
    
    const gameId = createData.gameId;
    console.log(`üéÆ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—É–Ω–¥–æ–≤: ${gameId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let gameData = await makeRequest(`/api/poker/${gameId}`);
    console.log(`üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: ${gameData.currentRound || gameData.settings?.currentRound}`);
    console.log(`üÉè –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${gameData.settings?.communityCards?.length || 0}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–ª–æ–ø—É
    let attempts = 0;
    while (attempts < 10) {
      gameData = await makeRequest(`/api/poker/${gameId}`);
      
      const currentRound = gameData.currentRound || gameData.settings?.currentRound;
      const communityCards = gameData.settings?.communityCards?.length || 0;
      
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}: –†–∞—É–Ω–¥=${currentRound}, –û–±—â–∏–µ –∫–∞—Ä—Ç—ã=${communityCards}, –°—Ç–∞—Ç—É—Å=${gameData.status}`);
      
      if (gameData.status === 'finished') {
        console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        break;
      }
      
      if (currentRound === 'flop' && communityCards >= 3) {
        console.log('üéâ –§–õ–û–ü –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –û–±—â–∏–µ –∫–∞—Ä—Ç—ã:', gameData.settings.communityCards);
        break;
      }
      
      if (currentRound === 'turn' && communityCards >= 4) {
        console.log('üéâ –¢–ï–†–ù –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –û–±—â–∏–µ –∫–∞—Ä—Ç—ã:', gameData.settings.communityCards);
        break;
      }
      
      if (currentRound === 'river' && communityCards >= 5) {
        console.log('üéâ –†–ò–í–ï–† –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –û–±—â–∏–µ –∫–∞—Ä—Ç—ã:', gameData.settings.communityCards);
        break;
      }
      
      attempts++;
      await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º –±–æ—Ç—ã —Å—ã–≥—Ä–∞—é—Ç
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–∞—É–Ω–¥–æ–≤:', error.message);
  }
}

async function runTests() {
  await testRandomCards();
  await testRounds();
}

runTests();

console.log('üÉè –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–∞—Ä—Ç...\n');

// 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
console.log('1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã:');
const deck = createDeck();
console.log(`   - –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–¥–∞ –∏–∑ ${deck.length} –∫–∞—Ä—Ç`);

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ:');
const cardKeys = new Set();
const duplicatesInDeck = [];

deck.forEach((card, index) => {
  const key = `${card.value}-${card.suit}`;
  if (cardKeys.has(key)) {
    duplicatesInDeck.push(`–ò–Ω–¥–µ–∫—Å ${index}: ${key}`);
  } else {
    cardKeys.add(key);
  }
});

if (duplicatesInDeck.length === 0) {
  console.log('   ‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã');
} else {
  console.log('   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–¥–µ:', duplicatesInDeck);
}

// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä—É —Å 4 –∏–≥—Ä–æ–∫–∞–º–∏
console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏–≥—Ä—ã:');
const mockGame = {
  players: [
    { username: '–ò–≥—Ä–æ–∫ 1', chips: 1000, cards: [], isBot: false },
    { username: '–ë–æ—Ç 1', chips: 1000, cards: [], isBot: true },
    { username: '–ë–æ—Ç 2', chips: 1000, cards: [], isBot: true },
    { username: '–ë–æ—Ç 3', chips: 1000, cards: [], isBot: true }
  ],
  deck: [],
  settings: {
    communityCards: []
  }
};

// –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
dealCards(mockGame);

console.log(`   - –†–æ–∑–¥–∞–Ω–æ ${mockGame.players.length * 2} –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º`);
console.log(`   - –û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: ${mockGame.deck.length}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å 
const validation = validateGameCards(mockGame);
if (validation.isValid) {
  console.log('   ‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏');
} else {
  console.log('   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã:', validation.errors);
}

// 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –æ–±—â–∏—Ö –∫–∞—Ä—Ç
console.log('\n4. –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –æ–±—â–∏—Ö –∫–∞—Ä—Ç:');
const { dealCommunityCards } = require('./server/utils/pokerUtils');

// –§–ª–æ–ø - 3 –∫–∞—Ä—Ç—ã
const flopCards = dealCommunityCards(mockGame.deck, 3, mockGame);
mockGame.settings.communityCards.push(...flopCards);
console.log(`   - –§–ª–æ–ø: ${flopCards.map(c => `${c.value} ${c.suit}`).join(', ')}`);

// –¢–µ—Ä–Ω - 1 –∫–∞—Ä—Ç–∞  
const turnCard = dealCommunityCards(mockGame.deck, 1, mockGame);
mockGame.settings.communityCards.push(...turnCard);
console.log(`   - –¢–µ—Ä–Ω: ${turnCard.map(c => `${c.value} ${c.suit}`).join(', ')}`);

// –†–∏–≤–µ—Ä - 1 –∫–∞—Ä—Ç–∞
const riverCard = dealCommunityCards(mockGame.deck, 1, mockGame);
mockGame.settings.communityCards.push(...riverCard);
console.log(`   - –†–∏–≤–µ—Ä: ${riverCard.map(c => `${c.value} ${c.suit}`).join(', ')}`);

// 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
console.log('\n5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç:');
const finalValidation = validateGameCards(mockGame);
if (finalValidation.isValid) {
  console.log(`   ‚úÖ –í—Å–µ ${finalValidation.totalCards} –∫–∞—Ä—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ`);
  console.log('   üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
} else {
  console.log('   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ:', finalValidation.errors);
  console.log('   üí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!');
}

console.log(`\nüìä –ò—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞—Ä—Ç: ${finalValidation.totalCards}/52`);
console.log(`üì¶ –û—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ–ª–æ–¥–µ: ${mockGame.deck.length} –∫–∞—Ä—Ç\n`); 