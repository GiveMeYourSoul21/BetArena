async function testUltimatePoker() {
  const API_URL = 'http://localhost:3002';
  
  try {
    console.log('üéØ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–û–ö–ï–†–ù–û–ô –°–ò–°–¢–ï–ú–´\n');
    
    // 1. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...');
    const createResponse = await fetch(`${API_URL}/api/poker/create`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: 8 })
    });
    
    if (!createResponse.ok) {
      throw new Error(`HTTP ${createResponse.status}: ${await createResponse.text()}`);
    }
    
    const createData = await createResponse.json();
    const gameId = createData.gameId;
    console.log(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: ID=${gameId}`);
    console.log(`‚úÖ –ü–µ—Ä–≤—ã–π —Ö–æ–¥: –∏–≥—Ä–æ–∫ ${createData.currentTurn}`);
    
    // 2. –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç—ã —Å—ã–≥—Ä–∞—é—Ç –≤ preflop
    console.log('\n2Ô∏è‚É£ –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç—ã —Å—ã–≥—Ä–∞—é—Ç –≤ preflop...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –±–æ—Ç–æ–≤
    let gameResponse = await fetch(`${API_URL}/api/poker/${gameId}`);
    let gameData = await gameResponse.json();
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: ${gameData.status}`);
    console.log(`‚úÖ –†–∞—É–Ω–¥: ${gameData.settings.currentRound}`);
    console.log(`‚úÖ –ë–∞–Ω–∫: ${gameData.pot}`);
    console.log(`‚úÖ –•–æ–¥: ${gameData.settings.currentTurn} (${gameData.players[gameData.settings.currentTurn]?.username})`);
    
    // 4. –ï—Å–ª–∏ —Ö–æ–¥ —É –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ - –¥–µ–ª–∞–µ–º call
    const currentPlayer = gameData.players[gameData.settings.currentTurn];
    if (currentPlayer && !currentPlayer.isBot) {
      console.log('\n3Ô∏è‚É£ –ù–∞—à —Ö–æ–¥! –î–µ–ª–∞–µ–º call...');
      
      const actionResponse = await fetch(`${API_URL}/api/poker/${gameId}/action`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: '123',
          action: 'call',
          amount: 0
        })
      });
      
      if (actionResponse.ok) {
        const actionData = await actionResponse.json();
        console.log(`‚úÖ Call –≤—ã–ø–æ–ª–Ω–µ–Ω! –ë–∞–Ω–∫: ${actionData.pot}`);
      } else {
        const errorText = await actionResponse.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorText}`);
      }
    } else {
      console.log('3Ô∏è‚É£ –°–µ–π—á–∞—Å —Ö–æ–¥ –±–æ—Ç–∞, –∂–¥–µ–º...');
    }
    
    // 5. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è preflop –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–ª–æ–ø—É
    console.log('\n4Ô∏è‚É£ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è preflop –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–ª–æ–ø—É...');
    await new Promise(resolve => setTimeout(resolve, 8000));
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–ª–æ–ø—É
    const flopResponse = await fetch(`${API_URL}/api/poker/${gameId}`);
    const flopData = await flopResponse.json();
    
    console.log('\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –ü–ï–†–ï–•–û–î–ê –ö –§–õ–û–ü–£:');
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${flopData.status}`);
    console.log(`‚úÖ –†–∞—É–Ω–¥: ${flopData.settings.currentRound}`);
    console.log(`‚úÖ –ë–∞–Ω–∫: ${flopData.pot}`);
    console.log(`‚úÖ –•–æ–¥: ${flopData.settings.currentTurn} (${flopData.players[flopData.settings.currentTurn]?.username || 'N/A'})`);
    
    if (flopData.settings.communityCards) {
      console.log(`‚úÖ –û–±—â–∏–µ –∫–∞—Ä—Ç—ã (${flopData.settings.communityCards.length}): ${flopData.settings.communityCards.map(c => c.value + c.suit).join(', ')}`);
    }
    
    console.log('\nüë• –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–ª–æ–ø—É:');
    flopData.players.forEach((player, i) => {
      const status = player.folded ? '‚ùå FOLD' : player.hasActed ? '‚úÖ ACTED' : '‚è≥ WAITING';
      console.log(`${i}: ${player.username} - üí∞${player.chips} —Ñ–∏—à–µ–∫, —Å—Ç–∞–≤–∫–∞: ${player.currentBet} ${status}`);
    });
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—é—Ç—Å—è
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–æ–≤ –Ω–∞ —Ñ–ª–æ–ø–µ...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const finalResponse = await fetch(`${API_URL}/api/poker/${gameId}`);
    const finalData = await finalResponse.json();
    
    console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${finalData.status}`);
    console.log(`‚úÖ –†–∞—É–Ω–¥: ${finalData.settings.currentRound}`);
    console.log(`‚úÖ –ë–∞–Ω–∫: ${finalData.pot}`);
    console.log(`‚úÖ –•–æ–¥: ${finalData.settings.currentTurn} (${finalData.players[finalData.settings.currentTurn]?.username || 'N/A'})`);
    
    if (finalData.status === 'finished') {
      console.log(`\nüèÜ –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${finalData.winner}`);
    } else {
      console.log('\nüéÆ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...');
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ë–æ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°–±—Ä–æ—Å hasActed —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('–ó–∞–ø—É—Å–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
testUltimatePoker().then(() => {
  console.log('–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}).catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
}); 