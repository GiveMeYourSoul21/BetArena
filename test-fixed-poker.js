async function testFixedPoker() {
  const API_URL = 'http://localhost:3002';
  
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∫–µ—Ä–Ω–æ–π –∏–≥—Ä—ã...\n');
    
    // 1. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...');
    const createResponse = await fetch(`${API_URL}/api/poker/create`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: 8 })
    });
    
    if (!createResponse.ok) {
      throw new Error(`HTTP ${createResponse.status}: ${await createResponse.text()}`);
    }
    
    const createData = await createResponse.json();
    const gameId = createData.gameId;
    console.log(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: ID=${gameId}`);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    console.log('‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã...');
    const gameResponse = await fetch(`${API_URL}/api/poker/${gameId}`);
    
    if (!gameResponse.ok) {
      throw new Error(`HTTP ${gameResponse.status}: ${await gameResponse.text()}`);
    }
    
    const gameData = await gameResponse.json();
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: ${gameData.status}`);
    console.log(`‚úÖ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: ${gameData.settings.currentRound}`);
    console.log(`‚úÖ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${gameData.settings.currentTurn}`);
    console.log(`‚úÖ –ë–∞–Ω–∫: ${gameData.pot}`);
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${gameData.players.filter(p => !p.folded).length}`);
    
    // 3. –î–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
    console.log('\n3Ô∏è‚É£ –ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ call...');
    const actionResponse = await fetch(`${API_URL}/api/poker/${gameId}/action`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: '123',
        action: 'call',
        amount: 0
      })
    });
    
    if (!actionResponse.ok) {
      const errorText = await actionResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: HTTP ${actionResponse.status}: ${errorText}`);
    } else {
      const actionData = await actionResponse.json();
      console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ù–æ–≤—ã–π –±–∞–Ω–∫: ${actionData.pot}`);
      console.log(`‚úÖ –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: ${actionData.settings.currentTurn}`);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–æ–≤
    console.log('\n4Ô∏è‚É£ –ñ–¥–µ–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const finalResponse = await fetch(`${API_URL}/api/poker/${gameId}`);
    
    if (!finalResponse.ok) {
      throw new Error(`HTTP ${finalResponse.status}: ${await finalResponse.text()}`);
    }
    
    const finalData = await finalResponse.json();
    
    console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${finalData.status}`);
    console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: ${finalData.settings.currentRound}`);
    console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫: ${finalData.pot}`);
    console.log(`‚úÖ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${finalData.settings.currentTurn}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:');
    finalData.players.forEach((player, i) => {
      console.log(`${i}: ${player.username} - üí∞${player.chips} —Ñ–∏—à–µ–∫, —Å—Ç–∞–≤–∫–∞: ${player.currentBet}, —Å–±—Ä–æ—à–µ–Ω: ${player.folded}, —Ö–æ–¥–∏–ª: ${player.hasActed}`);
    });
    
    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    console.error('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...');
testFixedPoker().then(() => {
  console.log('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}).catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
}); 