async function testFinalPoker() {
  const API_URL = 'http://localhost:3002';
  
  try {
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–û–ö–ï–†–ù–û–ô –ò–ì–†–´\n');
    
    // 1. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...');
    const createResponse = await fetch(`${API_URL}/api/poker/create`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: 8 })
    });
    
    if (!createResponse.ok) {
      throw new Error(`HTTP ${createResponse.status}: ${await createResponse.text()}`);
    }
    
    const createData = await createResponse.json();
    const gameId = createData.gameId;
    console.log(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: ID=${gameId}`);
    console.log(`‚úÖ –ü–µ—Ä–≤—ã–π —Ö–æ–¥: –∏–≥—Ä–æ–∫ ${createData.currentTurn}`);
    
    // 2. –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç—ã —Å—ã–≥—Ä–∞—é—Ç
    console.log('\n2Ô∏è‚É£ –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç—ã —Å—ã–≥—Ä–∞—é—Ç...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –±–æ—Ç–æ–≤
    let gameResponse = await fetch(`${API_URL}/api/poker/${gameId}`);
    let gameData = await gameResponse.json();
    
    console.log(`‚úÖ –ü–æ—Å–ª–µ –±–æ—Ç–æ–≤ - –ë–∞–Ω–∫: ${gameData.pot}, –•–æ–¥: ${gameData.settings.currentTurn}`);
    console.log(`‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞ —Ö–æ–¥–µ: ${gameData.players[gameData.settings.currentTurn]?.username}`);
    
    // 4. –ï—Å–ª–∏ —Ö–æ–¥ —É –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ - –¥–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const currentPlayer = gameData.players[gameData.settings.currentTurn];
    if (currentPlayer && !currentPlayer.isBot) {
      console.log('\n3Ô∏è‚É£ –ù–∞—à —Ö–æ–¥! –î–µ–ª–∞–µ–º call...');
      
      const actionResponse = await fetch(`${API_URL}/api/poker/${gameId}/action`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: '123', // username
          action: 'call',
          amount: 0
        })
      });
      
      if (actionResponse.ok) {
        const actionData = await actionResponse.json();
        console.log(`‚úÖ Call –≤—ã–ø–æ–ª–Ω–µ–Ω! –ë–∞–Ω–∫: ${actionData.pot}`);
      } else {
        const errorText = await actionResponse.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorText}`);
      }
    } else {
      console.log('3Ô∏è‚É£ –°–µ–π—á–∞—Å —Ö–æ–¥ –±–æ—Ç–∞, –∂–¥–µ–º...');
    }
    
    // 5. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
    console.log('\n4Ô∏è‚É£ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const finalResponse = await fetch(`${API_URL}/api/poker/${gameId}`);
    const finalData = await finalResponse.json();
    
    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${finalData.status}`);
    console.log(`‚úÖ –†–∞—É–Ω–¥: ${finalData.settings.currentRound}`);
    console.log(`‚úÖ –ë–∞–Ω–∫: ${finalData.pot}`);
    console.log(`‚úÖ –•–æ–¥: ${finalData.settings.currentTurn} (${finalData.players[finalData.settings.currentTurn]?.username || 'N/A'})`);
    
    if (finalData.settings.communityCards && finalData.settings.communityCards.length > 0) {
      console.log(`‚úÖ –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${finalData.settings.communityCards.length}`);
    }
    
    console.log('\nüë• –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:');
    finalData.players.forEach((player, i) => {
      const status = player.folded ? '‚ùå FOLD' : player.hasActed ? '‚úÖ ACTED' : '‚è≥ WAITING';
      console.log(`${i}: ${player.username} - üí∞${player.chips} —Ñ–∏—à–µ–∫, —Å—Ç–∞–≤–∫–∞: ${player.currentBet} ${status}`);
    });
    
    if (finalData.status === 'finished') {
      console.log(`\nüèÜ –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${finalData.winner}`);
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
testFinalPoker().then(() => {
  console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}).catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
}); 