async function testUsernameAction() {
  try {
    console.log('üéØ –¢–µ—Å—Ç—É—î–º–æ –¥—ñ—é –∑ username –∑–∞–º—ñ—Å—Ç—å userId...');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É
    const createResponse = await fetch('http://localhost:3002/api/poker/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: 8  // —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º userId
      })
    });
    
    const createData = await createResponse.json();
    if (!createResponse.ok) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏:', createData);
      return;
    }
    
    console.log('‚úÖ –ì—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞, ID:', createData.gameId);
    const gameId = createData.gameId;
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏
    const gameResponse = await fetch(`http://localhost:3002/api/poker/${gameId}`);
    const gameData = await gameResponse.json();
    
    if (!gameResponse.ok) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∏:', gameData);
      return;
    }
    
    console.log('üìä CurrentTurn:', gameData.currentTurn);
    console.log('üìä –ì—Ä–∞–≤–µ—Ü—å –Ω–∞ —Ö–æ–¥—ñ:', gameData.players[gameData.currentTurn]?.username);
    
    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –¥—ñ–π–¥–µ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    let attempts = 0;
    while (attempts < 20 && gameData.players[gameData.currentTurn]?.isBot) {
      console.log(`‚è≥ –ß–µ–∫–∞—î–º–æ —Ö–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è... (${attempts}/20)`);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const newGameResponse = await fetch(`http://localhost:3002/api/poker/${gameId}`);
      const newGameData = await newGameResponse.json();
      
      if (newGameResponse.ok) {
        Object.assign(gameData, newGameData);
        console.log('üìä CurrentTurn:', gameData.currentTurn, '–ì—Ä–∞–≤–µ—Ü—å:', gameData.players[gameData.currentTurn]?.username);
      }
      
      attempts++;
    }
    
    if (gameData.players[gameData.currentTurn]?.isBot) {
      console.log('‚ùå –†–µ–∞–ª—å–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –Ω–µ –¥–æ—á–µ–∫–∞–≤—Å—è —Ö–æ–¥—É');
      return;
    }
    
    console.log('üéâ –•–û–î –£ –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–ê–í–¶–Ø!');
    
    // –¢–µ–ø–µ—Ä —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –∑ USERNAME –∑–∞–º—ñ—Å—Ç—å userId (—è–∫ —Ä–æ–±–∏—Ç—å –∫–ª—ñ—î–Ω—Ç)
    const realPlayer = gameData.players.find(p => !p.isBot);
    const username = realPlayer.username;
    
    console.log(`üîß –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥—ñ—é –∑ username: "${username}" –∑–∞–º—ñ—Å—Ç—å userId: ${realPlayer.user}`);
    
    const actionResponse = await fetch(`http://localhost:3002/api/poker/${gameId}/action`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: username,  // ‚ö†Ô∏è –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û USERNAME!
        action: 'call',
        amount: 0
      })
    });
    
    const actionData = await actionResponse.json();
    
    if (actionResponse.ok) {
      console.log('‚úÖ –î—ñ—è –∑ username –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', actionData.pot, '–±–∞–Ω–∫');
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ—ó:', actionData);
    }
    
  } catch (error) {
    console.error('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
  }
}

testUsernameAction(); 